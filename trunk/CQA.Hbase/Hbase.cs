/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class Hbase {
  public interface Iface {
    /// <summary>
    /// Brings a table on-line (enables it)
    /// </summary>
    /// <param name="tableName">name of the table</param>
    void enableTable(byte[] tableName);
    #if SILVERLIGHT
    IAsyncResult Begin_enableTable(AsyncCallback callback, object state, byte[] tableName);
    void End_enableTable(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Disables a table (takes it off-line) If it is being served, the master
    /// will tell the servers to stop serving it.
    /// </summary>
    /// <param name="tableName">name of the table</param>
    void disableTable(byte[] tableName);
    #if SILVERLIGHT
    IAsyncResult Begin_disableTable(AsyncCallback callback, object state, byte[] tableName);
    void End_disableTable(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// @return true if table is on-line
    /// </summary>
    /// <param name="tableName">name of the table to check</param>
    bool isTableEnabled(byte[] tableName);
    #if SILVERLIGHT
    IAsyncResult Begin_isTableEnabled(AsyncCallback callback, object state, byte[] tableName);
    bool End_isTableEnabled(IAsyncResult asyncResult);
    #endif
    void compact(byte[] tableNameOrRegionName);
    #if SILVERLIGHT
    IAsyncResult Begin_compact(AsyncCallback callback, object state, byte[] tableNameOrRegionName);
    void End_compact(IAsyncResult asyncResult);
    #endif
    void majorCompact(byte[] tableNameOrRegionName);
    #if SILVERLIGHT
    IAsyncResult Begin_majorCompact(AsyncCallback callback, object state, byte[] tableNameOrRegionName);
    void End_majorCompact(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// List all the userspace tables.
    /// 
    /// @return returns a list of names
    /// </summary>
    List<byte[]> getTableNames();
    #if SILVERLIGHT
    IAsyncResult Begin_getTableNames(AsyncCallback callback, object state, );
    List<byte[]> End_getTableNames(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// List all the column families assoicated with a table.
    /// 
    /// @return list of column family descriptors
    /// </summary>
    /// <param name="tableName">table name</param>
    Dictionary<byte[], ColumnDescriptor> getColumnDescriptors(byte[] tableName);
    #if SILVERLIGHT
    IAsyncResult Begin_getColumnDescriptors(AsyncCallback callback, object state, byte[] tableName);
    Dictionary<byte[], ColumnDescriptor> End_getColumnDescriptors(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// List the regions associated with a table.
    /// 
    /// @return list of region descriptors
    /// </summary>
    /// <param name="tableName">table name</param>
    List<TRegionInfo> getTableRegions(byte[] tableName);
    #if SILVERLIGHT
    IAsyncResult Begin_getTableRegions(AsyncCallback callback, object state, byte[] tableName);
    List<TRegionInfo> End_getTableRegions(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Create a table with the specified column families.  The name
    /// field for each ColumnDescriptor must be set and must end in a
    /// colon (:). All other fields are optional and will get default
    /// values if not explicitly specified.
    /// 
    /// @throws IllegalArgument if an input parameter is invalid
    /// 
    /// @throws AlreadyExists if the table name already exists
    /// </summary>
    /// <param name="tableName">name of table to create</param>
    /// <param name="columnFamilies">list of column family descriptors</param>
    void createTable(byte[] tableName, List<ColumnDescriptor> columnFamilies);
    #if SILVERLIGHT
    IAsyncResult Begin_createTable(AsyncCallback callback, object state, byte[] tableName, List<ColumnDescriptor> columnFamilies);
    void End_createTable(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Deletes a table
    /// 
    /// @throws IOError if table doesn't exist on server or there was some other
    /// problem
    /// </summary>
    /// <param name="tableName">name of table to delete</param>
    void deleteTable(byte[] tableName);
    #if SILVERLIGHT
    IAsyncResult Begin_deleteTable(AsyncCallback callback, object state, byte[] tableName);
    void End_deleteTable(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get a single TCell for the specified table, row, and column at the
    /// latest timestamp. Returns an empty list if no such value exists.
    /// 
    /// @return value for specified row/column
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="column">column name</param>
    List<TCell> get(byte[] tableName, byte[] row, byte[] column);
    #if SILVERLIGHT
    IAsyncResult Begin_get(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column);
    List<TCell> End_get(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get the specified number of versions for the specified table,
    /// row, and column.
    /// 
    /// @return list of cells for specified row/column
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="column">column name</param>
    /// <param name="numVersions">number of versions to retrieve</param>
    List<TCell> getVer(byte[] tableName, byte[] row, byte[] column, int numVersions);
    #if SILVERLIGHT
    IAsyncResult Begin_getVer(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column, int numVersions);
    List<TCell> End_getVer(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get the specified number of versions for the specified table,
    /// row, and column.  Only versions less than or equal to the specified
    /// timestamp will be returned.
    /// 
    /// @return list of cells for specified row/column
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="column">column name</param>
    /// <param name="timestamp">timestamp</param>
    /// <param name="numVersions">number of versions to retrieve</param>
    List<TCell> getVerTs(byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions);
    #if SILVERLIGHT
    IAsyncResult Begin_getVerTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions);
    List<TCell> End_getVerTs(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get all the data for the specified table and row at the latest
    /// timestamp. Returns an empty list if the row does not exist.
    /// 
    /// @return TRowResult containing the row and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    List<TRowResult> getRow(byte[] tableName, byte[] row);
    #if SILVERLIGHT
    IAsyncResult Begin_getRow(AsyncCallback callback, object state, byte[] tableName, byte[] row);
    List<TRowResult> End_getRow(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get the specified columns for the specified table and row at the latest
    /// timestamp. Returns an empty list if the row does not exist.
    /// 
    /// @return TRowResult containing the row and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="columns">List of columns to return, null for all columns</param>
    List<TRowResult> getRowWithColumns(byte[] tableName, byte[] row, List<byte[]> columns);
    #if SILVERLIGHT
    IAsyncResult Begin_getRowWithColumns(AsyncCallback callback, object state, byte[] tableName, byte[] row, List<byte[]> columns);
    List<TRowResult> End_getRowWithColumns(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get all the data for the specified table and row at the specified
    /// timestamp. Returns an empty list if the row does not exist.
    /// 
    /// @return TRowResult containing the row and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of the table</param>
    /// <param name="row">row key</param>
    /// <param name="timestamp">timestamp</param>
    List<TRowResult> getRowTs(byte[] tableName, byte[] row, long timestamp);
    #if SILVERLIGHT
    IAsyncResult Begin_getRowTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, long timestamp);
    List<TRowResult> End_getRowTs(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get the specified columns for the specified table and row at the specified
    /// timestamp. Returns an empty list if the row does not exist.
    /// 
    /// @return TRowResult containing the row and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="columns">List of columns to return, null for all columns</param>
    /// <param name="timestamp"></param>
    List<TRowResult> getRowWithColumnsTs(byte[] tableName, byte[] row, List<byte[]> columns, long timestamp);
    #if SILVERLIGHT
    IAsyncResult Begin_getRowWithColumnsTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, List<byte[]> columns, long timestamp);
    List<TRowResult> End_getRowWithColumnsTs(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get all the data for the specified table and rows at the latest
    /// timestamp. Returns an empty list if no rows exist.
    /// 
    /// @return TRowResult containing the rows and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rows">row keys</param>
    List<TRowResult> getRows(byte[] tableName, List<byte[]> rows);
    #if SILVERLIGHT
    IAsyncResult Begin_getRows(AsyncCallback callback, object state, byte[] tableName, List<byte[]> rows);
    List<TRowResult> End_getRows(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get the specified columns for the specified table and rows at the latest
    /// timestamp. Returns an empty list if no rows exist.
    /// 
    /// @return TRowResult containing the rows and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rows">row keys</param>
    /// <param name="columns">List of columns to return, null for all columns</param>
    List<TRowResult> getRowsWithColumns(byte[] tableName, List<byte[]> rows, List<byte[]> columns);
    #if SILVERLIGHT
    IAsyncResult Begin_getRowsWithColumns(AsyncCallback callback, object state, byte[] tableName, List<byte[]> rows, List<byte[]> columns);
    List<TRowResult> End_getRowsWithColumns(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get all the data for the specified table and rows at the specified
    /// timestamp. Returns an empty list if no rows exist.
    /// 
    /// @return TRowResult containing the rows and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of the table</param>
    /// <param name="rows">row keys</param>
    /// <param name="timestamp">timestamp</param>
    List<TRowResult> getRowsTs(byte[] tableName, List<byte[]> rows, long timestamp);
    #if SILVERLIGHT
    IAsyncResult Begin_getRowsTs(AsyncCallback callback, object state, byte[] tableName, List<byte[]> rows, long timestamp);
    List<TRowResult> End_getRowsTs(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get the specified columns for the specified table and rows at the specified
    /// timestamp. Returns an empty list if no rows exist.
    /// 
    /// @return TRowResult containing the rows and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rows">row keys</param>
    /// <param name="columns">List of columns to return, null for all columns</param>
    /// <param name="timestamp"></param>
    List<TRowResult> getRowsWithColumnsTs(byte[] tableName, List<byte[]> rows, List<byte[]> columns, long timestamp);
    #if SILVERLIGHT
    IAsyncResult Begin_getRowsWithColumnsTs(AsyncCallback callback, object state, byte[] tableName, List<byte[]> rows, List<byte[]> columns, long timestamp);
    List<TRowResult> End_getRowsWithColumnsTs(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Apply a series of mutations (updates/deletes) to a row in a
    /// single transaction.  If an exception is thrown, then the
    /// transaction is aborted.  Default current timestamp is used, and
    /// all entries will have an identical timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="mutations">list of mutation commands</param>
    void mutateRow(byte[] tableName, byte[] row, List<Mutation> mutations);
    #if SILVERLIGHT
    IAsyncResult Begin_mutateRow(AsyncCallback callback, object state, byte[] tableName, byte[] row, List<Mutation> mutations);
    void End_mutateRow(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Apply a series of mutations (updates/deletes) to a row in a
    /// single transaction.  If an exception is thrown, then the
    /// transaction is aborted.  The specified timestamp is used, and
    /// all entries will have an identical timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="mutations">list of mutation commands</param>
    /// <param name="timestamp">timestamp</param>
    void mutateRowTs(byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp);
    #if SILVERLIGHT
    IAsyncResult Begin_mutateRowTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp);
    void End_mutateRowTs(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Apply a series of batches (each a series of mutations on a single row)
    /// in a single transaction.  If an exception is thrown, then the
    /// transaction is aborted.  Default current timestamp is used, and
    /// all entries will have an identical timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rowBatches">list of row batches</param>
    void mutateRows(byte[] tableName, List<BatchMutation> rowBatches);
    #if SILVERLIGHT
    IAsyncResult Begin_mutateRows(AsyncCallback callback, object state, byte[] tableName, List<BatchMutation> rowBatches);
    void End_mutateRows(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Apply a series of batches (each a series of mutations on a single row)
    /// in a single transaction.  If an exception is thrown, then the
    /// transaction is aborted.  The specified timestamp is used, and
    /// all entries will have an identical timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rowBatches">list of row batches</param>
    /// <param name="timestamp">timestamp</param>
    void mutateRowsTs(byte[] tableName, List<BatchMutation> rowBatches, long timestamp);
    #if SILVERLIGHT
    IAsyncResult Begin_mutateRowsTs(AsyncCallback callback, object state, byte[] tableName, List<BatchMutation> rowBatches, long timestamp);
    void End_mutateRowsTs(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Atomically increment the column value specified.  Returns the next value post increment.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row to increment</param>
    /// <param name="column">name of column</param>
    /// <param name="value">amount to increment by</param>
    long atomicIncrement(byte[] tableName, byte[] row, byte[] column, long value);
    #if SILVERLIGHT
    IAsyncResult Begin_atomicIncrement(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column, long value);
    long End_atomicIncrement(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Delete all cells that match the passed row and column.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">Row to update</param>
    /// <param name="column">name of column whose value is to be deleted</param>
    void deleteAll(byte[] tableName, byte[] row, byte[] column);
    #if SILVERLIGHT
    IAsyncResult Begin_deleteAll(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column);
    void End_deleteAll(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Delete all cells that match the passed row and column and whose
    /// timestamp is equal-to or older than the passed timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">Row to update</param>
    /// <param name="column">name of column whose value is to be deleted</param>
    /// <param name="timestamp">timestamp</param>
    void deleteAllTs(byte[] tableName, byte[] row, byte[] column, long timestamp);
    #if SILVERLIGHT
    IAsyncResult Begin_deleteAllTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column, long timestamp);
    void End_deleteAllTs(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Completely delete the row's cells.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">key of the row to be completely deleted.</param>
    void deleteAllRow(byte[] tableName, byte[] row);
    #if SILVERLIGHT
    IAsyncResult Begin_deleteAllRow(AsyncCallback callback, object state, byte[] tableName, byte[] row);
    void End_deleteAllRow(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Completely delete the row's cells marked with a timestamp
    /// equal-to or older than the passed timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">key of the row to be completely deleted.</param>
    /// <param name="timestamp">timestamp</param>
    void deleteAllRowTs(byte[] tableName, byte[] row, long timestamp);
    #if SILVERLIGHT
    IAsyncResult Begin_deleteAllRowTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, long timestamp);
    void End_deleteAllRowTs(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get a scanner on the current table starting at the specified row and
    /// ending at the last row in the table.  Return the specified columns.
    /// 
    /// @return scanner id to be used with other scanner procedures
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startRow">Starting row in table to scan.Send "" (empty string) to start at the first row.</param>
    /// <param name="columns">columns to scan. If column name is a column family, allcolumns of the specified column family are returned. It's also possibleto pass a regex in the column qualifier.</param>
    int scannerOpen(byte[] tableName, byte[] startRow, List<byte[]> columns);
    #if SILVERLIGHT
    IAsyncResult Begin_scannerOpen(AsyncCallback callback, object state, byte[] tableName, byte[] startRow, List<byte[]> columns);
    int End_scannerOpen(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get a scanner on the current table starting and stopping at the
    /// specified rows.  ending at the last row in the table.  Return the
    /// specified columns.
    /// 
    /// @return scanner id to be used with other scanner procedures
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startRow">Starting row in table to scan.Send "" (empty string) to start at the first row.</param>
    /// <param name="stopRow">row to stop scanning on. This row is *not* included in thescanner's results</param>
    /// <param name="columns">columns to scan. If column name is a column family, allcolumns of the specified column family are returned. It's also possibleto pass a regex in the column qualifier.</param>
    int scannerOpenWithStop(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns);
    #if SILVERLIGHT
    IAsyncResult Begin_scannerOpenWithStop(AsyncCallback callback, object state, byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns);
    int End_scannerOpenWithStop(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Open a scanner for a given prefix.  That is all rows will have the specified
    /// prefix. No other rows will be returned.
    /// 
    /// @return scanner id to use with other scanner calls
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startAndPrefix">the prefix (and thus start row) of the keys you want</param>
    /// <param name="columns">the columns you want returned</param>
    int scannerOpenWithPrefix(byte[] tableName, byte[] startAndPrefix, List<byte[]> columns);
    #if SILVERLIGHT
    IAsyncResult Begin_scannerOpenWithPrefix(AsyncCallback callback, object state, byte[] tableName, byte[] startAndPrefix, List<byte[]> columns);
    int End_scannerOpenWithPrefix(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get a scanner on the current table starting at the specified row and
    /// ending at the last row in the table.  Return the specified columns.
    /// Only values with the specified timestamp are returned.
    /// 
    /// @return scanner id to be used with other scanner procedures
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startRow">Starting row in table to scan.Send "" (empty string) to start at the first row.</param>
    /// <param name="columns">columns to scan. If column name is a column family, allcolumns of the specified column family are returned. It's also possibleto pass a regex in the column qualifier.</param>
    /// <param name="timestamp">timestamp</param>
    int scannerOpenTs(byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp);
    #if SILVERLIGHT
    IAsyncResult Begin_scannerOpenTs(AsyncCallback callback, object state, byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp);
    int End_scannerOpenTs(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get a scanner on the current table starting and stopping at the
    /// specified rows.  ending at the last row in the table.  Return the
    /// specified columns.  Only values with the specified timestamp are
    /// returned.
    /// 
    /// @return scanner id to be used with other scanner procedures
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startRow">Starting row in table to scan.Send "" (empty string) to start at the first row.</param>
    /// <param name="stopRow">row to stop scanning on. This row is *not* included in thescanner's results</param>
    /// <param name="columns">columns to scan. If column name is a column family, allcolumns of the specified column family are returned. It's also possibleto pass a regex in the column qualifier.</param>
    /// <param name="timestamp">timestamp</param>
    int scannerOpenWithStopTs(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, long timestamp);
    #if SILVERLIGHT
    IAsyncResult Begin_scannerOpenWithStopTs(AsyncCallback callback, object state, byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, long timestamp);
    int End_scannerOpenWithStopTs(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns the scanner's current row value and advances to the next
    /// row in the table.  When there are no more rows in the table, or a key
    /// greater-than-or-equal-to the scanner's specified stopRow is reached,
    /// an empty list is returned.
    /// 
    /// @return a TRowResult containing the current row and a map of the columns to TCells.
    /// 
    /// @throws IllegalArgument if ScannerID is invalid
    /// 
    /// @throws NotFound when the scanner reaches the end
    /// </summary>
    /// <param name="id">id of a scanner returned by scannerOpen</param>
    List<TRowResult> scannerGet(int id);
    #if SILVERLIGHT
    IAsyncResult Begin_scannerGet(AsyncCallback callback, object state, int id);
    List<TRowResult> End_scannerGet(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns, starting at the scanner's current row value nbRows worth of
    /// rows and advances to the next row in the table.  When there are no more
    /// rows in the table, or a key greater-than-or-equal-to the scanner's
    /// specified stopRow is reached,  an empty list is returned.
    /// 
    /// @return a TRowResult containing the current row and a map of the columns to TCells.
    /// 
    /// @throws IllegalArgument if ScannerID is invalid
    /// 
    /// @throws NotFound when the scanner reaches the end
    /// </summary>
    /// <param name="id">id of a scanner returned by scannerOpen</param>
    /// <param name="nbRows">number of results to return</param>
    List<TRowResult> scannerGetList(int id, int nbRows);
    #if SILVERLIGHT
    IAsyncResult Begin_scannerGetList(AsyncCallback callback, object state, int id, int nbRows);
    List<TRowResult> End_scannerGetList(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Closes the server-state associated with an open scanner.
    /// 
    /// @throws IllegalArgument if ScannerID is invalid
    /// </summary>
    /// <param name="id">id of a scanner returned by scannerOpen</param>
    void scannerClose(int id);
    #if SILVERLIGHT
    IAsyncResult Begin_scannerClose(AsyncCallback callback, object state, int id);
    void End_scannerClose(IAsyncResult asyncResult);
    #endif
  }

  public class Client : Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    
    #if SILVERLIGHT
    public IAsyncResult Begin_enableTable(AsyncCallback callback, object state, byte[] tableName)
    {
      return send_enableTable(callback, state, tableName);
    }

    public void End_enableTable(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_enableTable();
    }

    #endif

    /// <summary>
    /// Brings a table on-line (enables it)
    /// </summary>
    /// <param name="tableName">name of the table</param>
    public void enableTable(byte[] tableName)
    {
      #if !SILVERLIGHT
      send_enableTable(tableName);
      recv_enableTable();

      #else
      var asyncResult = Begin_enableTable(null, null, tableName);
      End_enableTable(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_enableTable(AsyncCallback callback, object state, byte[] tableName)
    #else
    public void send_enableTable(byte[] tableName)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("enableTable", TMessageType.Call, seqid_));
      enableTable_args args = new enableTable_args();
      args.TableName = tableName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_enableTable()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      enableTable_result result = new enableTable_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_disableTable(AsyncCallback callback, object state, byte[] tableName)
    {
      return send_disableTable(callback, state, tableName);
    }

    public void End_disableTable(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_disableTable();
    }

    #endif

    /// <summary>
    /// Disables a table (takes it off-line) If it is being served, the master
    /// will tell the servers to stop serving it.
    /// </summary>
    /// <param name="tableName">name of the table</param>
    public void disableTable(byte[] tableName)
    {
      #if !SILVERLIGHT
      send_disableTable(tableName);
      recv_disableTable();

      #else
      var asyncResult = Begin_disableTable(null, null, tableName);
      End_disableTable(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_disableTable(AsyncCallback callback, object state, byte[] tableName)
    #else
    public void send_disableTable(byte[] tableName)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("disableTable", TMessageType.Call, seqid_));
      disableTable_args args = new disableTable_args();
      args.TableName = tableName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_disableTable()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      disableTable_result result = new disableTable_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_isTableEnabled(AsyncCallback callback, object state, byte[] tableName)
    {
      return send_isTableEnabled(callback, state, tableName);
    }

    public bool End_isTableEnabled(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isTableEnabled();
    }

    #endif

    /// <summary>
    /// @return true if table is on-line
    /// </summary>
    /// <param name="tableName">name of the table to check</param>
    public bool isTableEnabled(byte[] tableName)
    {
      #if !SILVERLIGHT
      send_isTableEnabled(tableName);
      return recv_isTableEnabled();

      #else
      var asyncResult = Begin_isTableEnabled(null, null, tableName);
      return End_isTableEnabled(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_isTableEnabled(AsyncCallback callback, object state, byte[] tableName)
    #else
    public void send_isTableEnabled(byte[] tableName)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("isTableEnabled", TMessageType.Call, seqid_));
      isTableEnabled_args args = new isTableEnabled_args();
      args.TableName = tableName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_isTableEnabled()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isTableEnabled_result result = new isTableEnabled_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isTableEnabled failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_compact(AsyncCallback callback, object state, byte[] tableNameOrRegionName)
    {
      return send_compact(callback, state, tableNameOrRegionName);
    }

    public void End_compact(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_compact();
    }

    #endif

    public void compact(byte[] tableNameOrRegionName)
    {
      #if !SILVERLIGHT
      send_compact(tableNameOrRegionName);
      recv_compact();

      #else
      var asyncResult = Begin_compact(null, null, tableNameOrRegionName);
      End_compact(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_compact(AsyncCallback callback, object state, byte[] tableNameOrRegionName)
    #else
    public void send_compact(byte[] tableNameOrRegionName)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("compact", TMessageType.Call, seqid_));
      compact_args args = new compact_args();
      args.TableNameOrRegionName = tableNameOrRegionName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_compact()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      compact_result result = new compact_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_majorCompact(AsyncCallback callback, object state, byte[] tableNameOrRegionName)
    {
      return send_majorCompact(callback, state, tableNameOrRegionName);
    }

    public void End_majorCompact(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_majorCompact();
    }

    #endif

    public void majorCompact(byte[] tableNameOrRegionName)
    {
      #if !SILVERLIGHT
      send_majorCompact(tableNameOrRegionName);
      recv_majorCompact();

      #else
      var asyncResult = Begin_majorCompact(null, null, tableNameOrRegionName);
      End_majorCompact(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_majorCompact(AsyncCallback callback, object state, byte[] tableNameOrRegionName)
    #else
    public void send_majorCompact(byte[] tableNameOrRegionName)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("majorCompact", TMessageType.Call, seqid_));
      majorCompact_args args = new majorCompact_args();
      args.TableNameOrRegionName = tableNameOrRegionName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_majorCompact()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      majorCompact_result result = new majorCompact_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getTableNames(AsyncCallback callback, object state, )
    {
      return send_getTableNames(callback, state);
    }

    public List<byte[]> End_getTableNames(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getTableNames();
    }

    #endif

    /// <summary>
    /// List all the userspace tables.
    /// 
    /// @return returns a list of names
    /// </summary>
    public List<byte[]> getTableNames()
    {
      #if !SILVERLIGHT
      send_getTableNames();
      return recv_getTableNames();

      #else
      var asyncResult = Begin_getTableNames(null, null, );
      return End_getTableNames(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getTableNames(AsyncCallback callback, object state, )
    #else
    public void send_getTableNames()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getTableNames", TMessageType.Call, seqid_));
      getTableNames_args args = new getTableNames_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<byte[]> recv_getTableNames()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getTableNames_result result = new getTableNames_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTableNames failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getColumnDescriptors(AsyncCallback callback, object state, byte[] tableName)
    {
      return send_getColumnDescriptors(callback, state, tableName);
    }

    public Dictionary<byte[], ColumnDescriptor> End_getColumnDescriptors(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getColumnDescriptors();
    }

    #endif

    /// <summary>
    /// List all the column families assoicated with a table.
    /// 
    /// @return list of column family descriptors
    /// </summary>
    /// <param name="tableName">table name</param>
    public Dictionary<byte[], ColumnDescriptor> getColumnDescriptors(byte[] tableName)
    {
      #if !SILVERLIGHT
      send_getColumnDescriptors(tableName);
      return recv_getColumnDescriptors();

      #else
      var asyncResult = Begin_getColumnDescriptors(null, null, tableName);
      return End_getColumnDescriptors(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getColumnDescriptors(AsyncCallback callback, object state, byte[] tableName)
    #else
    public void send_getColumnDescriptors(byte[] tableName)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getColumnDescriptors", TMessageType.Call, seqid_));
      getColumnDescriptors_args args = new getColumnDescriptors_args();
      args.TableName = tableName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<byte[], ColumnDescriptor> recv_getColumnDescriptors()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getColumnDescriptors_result result = new getColumnDescriptors_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getColumnDescriptors failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getTableRegions(AsyncCallback callback, object state, byte[] tableName)
    {
      return send_getTableRegions(callback, state, tableName);
    }

    public List<TRegionInfo> End_getTableRegions(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getTableRegions();
    }

    #endif

    /// <summary>
    /// List the regions associated with a table.
    /// 
    /// @return list of region descriptors
    /// </summary>
    /// <param name="tableName">table name</param>
    public List<TRegionInfo> getTableRegions(byte[] tableName)
    {
      #if !SILVERLIGHT
      send_getTableRegions(tableName);
      return recv_getTableRegions();

      #else
      var asyncResult = Begin_getTableRegions(null, null, tableName);
      return End_getTableRegions(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getTableRegions(AsyncCallback callback, object state, byte[] tableName)
    #else
    public void send_getTableRegions(byte[] tableName)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getTableRegions", TMessageType.Call, seqid_));
      getTableRegions_args args = new getTableRegions_args();
      args.TableName = tableName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TRegionInfo> recv_getTableRegions()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getTableRegions_result result = new getTableRegions_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTableRegions failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_createTable(AsyncCallback callback, object state, byte[] tableName, List<ColumnDescriptor> columnFamilies)
    {
      return send_createTable(callback, state, tableName, columnFamilies);
    }

    public void End_createTable(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_createTable();
    }

    #endif

    /// <summary>
    /// Create a table with the specified column families.  The name
    /// field for each ColumnDescriptor must be set and must end in a
    /// colon (:). All other fields are optional and will get default
    /// values if not explicitly specified.
    /// 
    /// @throws IllegalArgument if an input parameter is invalid
    /// 
    /// @throws AlreadyExists if the table name already exists
    /// </summary>
    /// <param name="tableName">name of table to create</param>
    /// <param name="columnFamilies">list of column family descriptors</param>
    public void createTable(byte[] tableName, List<ColumnDescriptor> columnFamilies)
    {
      #if !SILVERLIGHT
      send_createTable(tableName, columnFamilies);
      recv_createTable();

      #else
      var asyncResult = Begin_createTable(null, null, tableName, columnFamilies);
      End_createTable(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createTable(AsyncCallback callback, object state, byte[] tableName, List<ColumnDescriptor> columnFamilies)
    #else
    public void send_createTable(byte[] tableName, List<ColumnDescriptor> columnFamilies)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("createTable", TMessageType.Call, seqid_));
      createTable_args args = new createTable_args();
      args.TableName = tableName;
      args.ColumnFamilies = columnFamilies;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_createTable()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createTable_result result = new createTable_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      if (result.__isset.ia) {
        throw result.Ia;
      }
      if (result.__isset.exist) {
        throw result.Exist;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteTable(AsyncCallback callback, object state, byte[] tableName)
    {
      return send_deleteTable(callback, state, tableName);
    }

    public void End_deleteTable(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_deleteTable();
    }

    #endif

    /// <summary>
    /// Deletes a table
    /// 
    /// @throws IOError if table doesn't exist on server or there was some other
    /// problem
    /// </summary>
    /// <param name="tableName">name of table to delete</param>
    public void deleteTable(byte[] tableName)
    {
      #if !SILVERLIGHT
      send_deleteTable(tableName);
      recv_deleteTable();

      #else
      var asyncResult = Begin_deleteTable(null, null, tableName);
      End_deleteTable(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteTable(AsyncCallback callback, object state, byte[] tableName)
    #else
    public void send_deleteTable(byte[] tableName)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteTable", TMessageType.Call, seqid_));
      deleteTable_args args = new deleteTable_args();
      args.TableName = tableName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_deleteTable()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteTable_result result = new deleteTable_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_get(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column)
    {
      return send_get(callback, state, tableName, row, column);
    }

    public List<TCell> End_get(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get();
    }

    #endif

    /// <summary>
    /// Get a single TCell for the specified table, row, and column at the
    /// latest timestamp. Returns an empty list if no such value exists.
    /// 
    /// @return value for specified row/column
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="column">column name</param>
    public List<TCell> get(byte[] tableName, byte[] row, byte[] column)
    {
      #if !SILVERLIGHT
      send_get(tableName, row, column);
      return recv_get();

      #else
      var asyncResult = Begin_get(null, null, tableName, row, column);
      return End_get(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column)
    #else
    public void send_get(byte[] tableName, byte[] row, byte[] column)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("get", TMessageType.Call, seqid_));
      get_args args = new get_args();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TCell> recv_get()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_result result = new get_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getVer(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column, int numVersions)
    {
      return send_getVer(callback, state, tableName, row, column, numVersions);
    }

    public List<TCell> End_getVer(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getVer();
    }

    #endif

    /// <summary>
    /// Get the specified number of versions for the specified table,
    /// row, and column.
    /// 
    /// @return list of cells for specified row/column
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="column">column name</param>
    /// <param name="numVersions">number of versions to retrieve</param>
    public List<TCell> getVer(byte[] tableName, byte[] row, byte[] column, int numVersions)
    {
      #if !SILVERLIGHT
      send_getVer(tableName, row, column, numVersions);
      return recv_getVer();

      #else
      var asyncResult = Begin_getVer(null, null, tableName, row, column, numVersions);
      return End_getVer(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getVer(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column, int numVersions)
    #else
    public void send_getVer(byte[] tableName, byte[] row, byte[] column, int numVersions)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getVer", TMessageType.Call, seqid_));
      getVer_args args = new getVer_args();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.NumVersions = numVersions;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TCell> recv_getVer()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getVer_result result = new getVer_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getVer failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getVerTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions)
    {
      return send_getVerTs(callback, state, tableName, row, column, timestamp, numVersions);
    }

    public List<TCell> End_getVerTs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getVerTs();
    }

    #endif

    /// <summary>
    /// Get the specified number of versions for the specified table,
    /// row, and column.  Only versions less than or equal to the specified
    /// timestamp will be returned.
    /// 
    /// @return list of cells for specified row/column
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="column">column name</param>
    /// <param name="timestamp">timestamp</param>
    /// <param name="numVersions">number of versions to retrieve</param>
    public List<TCell> getVerTs(byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions)
    {
      #if !SILVERLIGHT
      send_getVerTs(tableName, row, column, timestamp, numVersions);
      return recv_getVerTs();

      #else
      var asyncResult = Begin_getVerTs(null, null, tableName, row, column, timestamp, numVersions);
      return End_getVerTs(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getVerTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions)
    #else
    public void send_getVerTs(byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getVerTs", TMessageType.Call, seqid_));
      getVerTs_args args = new getVerTs_args();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.Timestamp = timestamp;
      args.NumVersions = numVersions;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TCell> recv_getVerTs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getVerTs_result result = new getVerTs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getVerTs failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getRow(AsyncCallback callback, object state, byte[] tableName, byte[] row)
    {
      return send_getRow(callback, state, tableName, row);
    }

    public List<TRowResult> End_getRow(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRow();
    }

    #endif

    /// <summary>
    /// Get all the data for the specified table and row at the latest
    /// timestamp. Returns an empty list if the row does not exist.
    /// 
    /// @return TRowResult containing the row and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    public List<TRowResult> getRow(byte[] tableName, byte[] row)
    {
      #if !SILVERLIGHT
      send_getRow(tableName, row);
      return recv_getRow();

      #else
      var asyncResult = Begin_getRow(null, null, tableName, row);
      return End_getRow(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRow(AsyncCallback callback, object state, byte[] tableName, byte[] row)
    #else
    public void send_getRow(byte[] tableName, byte[] row)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getRow", TMessageType.Call, seqid_));
      getRow_args args = new getRow_args();
      args.TableName = tableName;
      args.Row = row;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TRowResult> recv_getRow()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRow_result result = new getRow_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRow failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getRowWithColumns(AsyncCallback callback, object state, byte[] tableName, byte[] row, List<byte[]> columns)
    {
      return send_getRowWithColumns(callback, state, tableName, row, columns);
    }

    public List<TRowResult> End_getRowWithColumns(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRowWithColumns();
    }

    #endif

    /// <summary>
    /// Get the specified columns for the specified table and row at the latest
    /// timestamp. Returns an empty list if the row does not exist.
    /// 
    /// @return TRowResult containing the row and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="columns">List of columns to return, null for all columns</param>
    public List<TRowResult> getRowWithColumns(byte[] tableName, byte[] row, List<byte[]> columns)
    {
      #if !SILVERLIGHT
      send_getRowWithColumns(tableName, row, columns);
      return recv_getRowWithColumns();

      #else
      var asyncResult = Begin_getRowWithColumns(null, null, tableName, row, columns);
      return End_getRowWithColumns(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRowWithColumns(AsyncCallback callback, object state, byte[] tableName, byte[] row, List<byte[]> columns)
    #else
    public void send_getRowWithColumns(byte[] tableName, byte[] row, List<byte[]> columns)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getRowWithColumns", TMessageType.Call, seqid_));
      getRowWithColumns_args args = new getRowWithColumns_args();
      args.TableName = tableName;
      args.Row = row;
      args.Columns = columns;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TRowResult> recv_getRowWithColumns()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRowWithColumns_result result = new getRowWithColumns_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowWithColumns failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getRowTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, long timestamp)
    {
      return send_getRowTs(callback, state, tableName, row, timestamp);
    }

    public List<TRowResult> End_getRowTs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRowTs();
    }

    #endif

    /// <summary>
    /// Get all the data for the specified table and row at the specified
    /// timestamp. Returns an empty list if the row does not exist.
    /// 
    /// @return TRowResult containing the row and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of the table</param>
    /// <param name="row">row key</param>
    /// <param name="timestamp">timestamp</param>
    public List<TRowResult> getRowTs(byte[] tableName, byte[] row, long timestamp)
    {
      #if !SILVERLIGHT
      send_getRowTs(tableName, row, timestamp);
      return recv_getRowTs();

      #else
      var asyncResult = Begin_getRowTs(null, null, tableName, row, timestamp);
      return End_getRowTs(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRowTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, long timestamp)
    #else
    public void send_getRowTs(byte[] tableName, byte[] row, long timestamp)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getRowTs", TMessageType.Call, seqid_));
      getRowTs_args args = new getRowTs_args();
      args.TableName = tableName;
      args.Row = row;
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TRowResult> recv_getRowTs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRowTs_result result = new getRowTs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowTs failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getRowWithColumnsTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, List<byte[]> columns, long timestamp)
    {
      return send_getRowWithColumnsTs(callback, state, tableName, row, columns, timestamp);
    }

    public List<TRowResult> End_getRowWithColumnsTs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRowWithColumnsTs();
    }

    #endif

    /// <summary>
    /// Get the specified columns for the specified table and row at the specified
    /// timestamp. Returns an empty list if the row does not exist.
    /// 
    /// @return TRowResult containing the row and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="columns">List of columns to return, null for all columns</param>
    /// <param name="timestamp"></param>
    public List<TRowResult> getRowWithColumnsTs(byte[] tableName, byte[] row, List<byte[]> columns, long timestamp)
    {
      #if !SILVERLIGHT
      send_getRowWithColumnsTs(tableName, row, columns, timestamp);
      return recv_getRowWithColumnsTs();

      #else
      var asyncResult = Begin_getRowWithColumnsTs(null, null, tableName, row, columns, timestamp);
      return End_getRowWithColumnsTs(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRowWithColumnsTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, List<byte[]> columns, long timestamp)
    #else
    public void send_getRowWithColumnsTs(byte[] tableName, byte[] row, List<byte[]> columns, long timestamp)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getRowWithColumnsTs", TMessageType.Call, seqid_));
      getRowWithColumnsTs_args args = new getRowWithColumnsTs_args();
      args.TableName = tableName;
      args.Row = row;
      args.Columns = columns;
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TRowResult> recv_getRowWithColumnsTs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRowWithColumnsTs_result result = new getRowWithColumnsTs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowWithColumnsTs failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getRows(AsyncCallback callback, object state, byte[] tableName, List<byte[]> rows)
    {
      return send_getRows(callback, state, tableName, rows);
    }

    public List<TRowResult> End_getRows(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRows();
    }

    #endif

    /// <summary>
    /// Get all the data for the specified table and rows at the latest
    /// timestamp. Returns an empty list if no rows exist.
    /// 
    /// @return TRowResult containing the rows and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rows">row keys</param>
    public List<TRowResult> getRows(byte[] tableName, List<byte[]> rows)
    {
      #if !SILVERLIGHT
      send_getRows(tableName, rows);
      return recv_getRows();

      #else
      var asyncResult = Begin_getRows(null, null, tableName, rows);
      return End_getRows(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRows(AsyncCallback callback, object state, byte[] tableName, List<byte[]> rows)
    #else
    public void send_getRows(byte[] tableName, List<byte[]> rows)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getRows", TMessageType.Call, seqid_));
      getRows_args args = new getRows_args();
      args.TableName = tableName;
      args.Rows = rows;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TRowResult> recv_getRows()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRows_result result = new getRows_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRows failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getRowsWithColumns(AsyncCallback callback, object state, byte[] tableName, List<byte[]> rows, List<byte[]> columns)
    {
      return send_getRowsWithColumns(callback, state, tableName, rows, columns);
    }

    public List<TRowResult> End_getRowsWithColumns(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRowsWithColumns();
    }

    #endif

    /// <summary>
    /// Get the specified columns for the specified table and rows at the latest
    /// timestamp. Returns an empty list if no rows exist.
    /// 
    /// @return TRowResult containing the rows and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rows">row keys</param>
    /// <param name="columns">List of columns to return, null for all columns</param>
    public List<TRowResult> getRowsWithColumns(byte[] tableName, List<byte[]> rows, List<byte[]> columns)
    {
      #if !SILVERLIGHT
      send_getRowsWithColumns(tableName, rows, columns);
      return recv_getRowsWithColumns();

      #else
      var asyncResult = Begin_getRowsWithColumns(null, null, tableName, rows, columns);
      return End_getRowsWithColumns(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRowsWithColumns(AsyncCallback callback, object state, byte[] tableName, List<byte[]> rows, List<byte[]> columns)
    #else
    public void send_getRowsWithColumns(byte[] tableName, List<byte[]> rows, List<byte[]> columns)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getRowsWithColumns", TMessageType.Call, seqid_));
      getRowsWithColumns_args args = new getRowsWithColumns_args();
      args.TableName = tableName;
      args.Rows = rows;
      args.Columns = columns;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TRowResult> recv_getRowsWithColumns()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRowsWithColumns_result result = new getRowsWithColumns_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowsWithColumns failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getRowsTs(AsyncCallback callback, object state, byte[] tableName, List<byte[]> rows, long timestamp)
    {
      return send_getRowsTs(callback, state, tableName, rows, timestamp);
    }

    public List<TRowResult> End_getRowsTs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRowsTs();
    }

    #endif

    /// <summary>
    /// Get all the data for the specified table and rows at the specified
    /// timestamp. Returns an empty list if no rows exist.
    /// 
    /// @return TRowResult containing the rows and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of the table</param>
    /// <param name="rows">row keys</param>
    /// <param name="timestamp">timestamp</param>
    public List<TRowResult> getRowsTs(byte[] tableName, List<byte[]> rows, long timestamp)
    {
      #if !SILVERLIGHT
      send_getRowsTs(tableName, rows, timestamp);
      return recv_getRowsTs();

      #else
      var asyncResult = Begin_getRowsTs(null, null, tableName, rows, timestamp);
      return End_getRowsTs(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRowsTs(AsyncCallback callback, object state, byte[] tableName, List<byte[]> rows, long timestamp)
    #else
    public void send_getRowsTs(byte[] tableName, List<byte[]> rows, long timestamp)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getRowsTs", TMessageType.Call, seqid_));
      getRowsTs_args args = new getRowsTs_args();
      args.TableName = tableName;
      args.Rows = rows;
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TRowResult> recv_getRowsTs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRowsTs_result result = new getRowsTs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowsTs failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getRowsWithColumnsTs(AsyncCallback callback, object state, byte[] tableName, List<byte[]> rows, List<byte[]> columns, long timestamp)
    {
      return send_getRowsWithColumnsTs(callback, state, tableName, rows, columns, timestamp);
    }

    public List<TRowResult> End_getRowsWithColumnsTs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRowsWithColumnsTs();
    }

    #endif

    /// <summary>
    /// Get the specified columns for the specified table and rows at the specified
    /// timestamp. Returns an empty list if no rows exist.
    /// 
    /// @return TRowResult containing the rows and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rows">row keys</param>
    /// <param name="columns">List of columns to return, null for all columns</param>
    /// <param name="timestamp"></param>
    public List<TRowResult> getRowsWithColumnsTs(byte[] tableName, List<byte[]> rows, List<byte[]> columns, long timestamp)
    {
      #if !SILVERLIGHT
      send_getRowsWithColumnsTs(tableName, rows, columns, timestamp);
      return recv_getRowsWithColumnsTs();

      #else
      var asyncResult = Begin_getRowsWithColumnsTs(null, null, tableName, rows, columns, timestamp);
      return End_getRowsWithColumnsTs(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRowsWithColumnsTs(AsyncCallback callback, object state, byte[] tableName, List<byte[]> rows, List<byte[]> columns, long timestamp)
    #else
    public void send_getRowsWithColumnsTs(byte[] tableName, List<byte[]> rows, List<byte[]> columns, long timestamp)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getRowsWithColumnsTs", TMessageType.Call, seqid_));
      getRowsWithColumnsTs_args args = new getRowsWithColumnsTs_args();
      args.TableName = tableName;
      args.Rows = rows;
      args.Columns = columns;
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TRowResult> recv_getRowsWithColumnsTs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRowsWithColumnsTs_result result = new getRowsWithColumnsTs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowsWithColumnsTs failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_mutateRow(AsyncCallback callback, object state, byte[] tableName, byte[] row, List<Mutation> mutations)
    {
      return send_mutateRow(callback, state, tableName, row, mutations);
    }

    public void End_mutateRow(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_mutateRow();
    }

    #endif

    /// <summary>
    /// Apply a series of mutations (updates/deletes) to a row in a
    /// single transaction.  If an exception is thrown, then the
    /// transaction is aborted.  Default current timestamp is used, and
    /// all entries will have an identical timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="mutations">list of mutation commands</param>
    public void mutateRow(byte[] tableName, byte[] row, List<Mutation> mutations)
    {
      #if !SILVERLIGHT
      send_mutateRow(tableName, row, mutations);
      recv_mutateRow();

      #else
      var asyncResult = Begin_mutateRow(null, null, tableName, row, mutations);
      End_mutateRow(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_mutateRow(AsyncCallback callback, object state, byte[] tableName, byte[] row, List<Mutation> mutations)
    #else
    public void send_mutateRow(byte[] tableName, byte[] row, List<Mutation> mutations)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("mutateRow", TMessageType.Call, seqid_));
      mutateRow_args args = new mutateRow_args();
      args.TableName = tableName;
      args.Row = row;
      args.Mutations = mutations;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_mutateRow()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      mutateRow_result result = new mutateRow_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      if (result.__isset.ia) {
        throw result.Ia;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_mutateRowTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp)
    {
      return send_mutateRowTs(callback, state, tableName, row, mutations, timestamp);
    }

    public void End_mutateRowTs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_mutateRowTs();
    }

    #endif

    /// <summary>
    /// Apply a series of mutations (updates/deletes) to a row in a
    /// single transaction.  If an exception is thrown, then the
    /// transaction is aborted.  The specified timestamp is used, and
    /// all entries will have an identical timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="mutations">list of mutation commands</param>
    /// <param name="timestamp">timestamp</param>
    public void mutateRowTs(byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp)
    {
      #if !SILVERLIGHT
      send_mutateRowTs(tableName, row, mutations, timestamp);
      recv_mutateRowTs();

      #else
      var asyncResult = Begin_mutateRowTs(null, null, tableName, row, mutations, timestamp);
      End_mutateRowTs(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_mutateRowTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp)
    #else
    public void send_mutateRowTs(byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("mutateRowTs", TMessageType.Call, seqid_));
      mutateRowTs_args args = new mutateRowTs_args();
      args.TableName = tableName;
      args.Row = row;
      args.Mutations = mutations;
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_mutateRowTs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      mutateRowTs_result result = new mutateRowTs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      if (result.__isset.ia) {
        throw result.Ia;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_mutateRows(AsyncCallback callback, object state, byte[] tableName, List<BatchMutation> rowBatches)
    {
      return send_mutateRows(callback, state, tableName, rowBatches);
    }

    public void End_mutateRows(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_mutateRows();
    }

    #endif

    /// <summary>
    /// Apply a series of batches (each a series of mutations on a single row)
    /// in a single transaction.  If an exception is thrown, then the
    /// transaction is aborted.  Default current timestamp is used, and
    /// all entries will have an identical timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rowBatches">list of row batches</param>
    public void mutateRows(byte[] tableName, List<BatchMutation> rowBatches)
    {
      #if !SILVERLIGHT
      send_mutateRows(tableName, rowBatches);
      recv_mutateRows();

      #else
      var asyncResult = Begin_mutateRows(null, null, tableName, rowBatches);
      End_mutateRows(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_mutateRows(AsyncCallback callback, object state, byte[] tableName, List<BatchMutation> rowBatches)
    #else
    public void send_mutateRows(byte[] tableName, List<BatchMutation> rowBatches)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("mutateRows", TMessageType.Call, seqid_));
      mutateRows_args args = new mutateRows_args();
      args.TableName = tableName;
      args.RowBatches = rowBatches;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_mutateRows()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      mutateRows_result result = new mutateRows_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      if (result.__isset.ia) {
        throw result.Ia;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_mutateRowsTs(AsyncCallback callback, object state, byte[] tableName, List<BatchMutation> rowBatches, long timestamp)
    {
      return send_mutateRowsTs(callback, state, tableName, rowBatches, timestamp);
    }

    public void End_mutateRowsTs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_mutateRowsTs();
    }

    #endif

    /// <summary>
    /// Apply a series of batches (each a series of mutations on a single row)
    /// in a single transaction.  If an exception is thrown, then the
    /// transaction is aborted.  The specified timestamp is used, and
    /// all entries will have an identical timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rowBatches">list of row batches</param>
    /// <param name="timestamp">timestamp</param>
    public void mutateRowsTs(byte[] tableName, List<BatchMutation> rowBatches, long timestamp)
    {
      #if !SILVERLIGHT
      send_mutateRowsTs(tableName, rowBatches, timestamp);
      recv_mutateRowsTs();

      #else
      var asyncResult = Begin_mutateRowsTs(null, null, tableName, rowBatches, timestamp);
      End_mutateRowsTs(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_mutateRowsTs(AsyncCallback callback, object state, byte[] tableName, List<BatchMutation> rowBatches, long timestamp)
    #else
    public void send_mutateRowsTs(byte[] tableName, List<BatchMutation> rowBatches, long timestamp)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("mutateRowsTs", TMessageType.Call, seqid_));
      mutateRowsTs_args args = new mutateRowsTs_args();
      args.TableName = tableName;
      args.RowBatches = rowBatches;
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_mutateRowsTs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      mutateRowsTs_result result = new mutateRowsTs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      if (result.__isset.ia) {
        throw result.Ia;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_atomicIncrement(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column, long value)
    {
      return send_atomicIncrement(callback, state, tableName, row, column, value);
    }

    public long End_atomicIncrement(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_atomicIncrement();
    }

    #endif

    /// <summary>
    /// Atomically increment the column value specified.  Returns the next value post increment.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row to increment</param>
    /// <param name="column">name of column</param>
    /// <param name="value">amount to increment by</param>
    public long atomicIncrement(byte[] tableName, byte[] row, byte[] column, long value)
    {
      #if !SILVERLIGHT
      send_atomicIncrement(tableName, row, column, value);
      return recv_atomicIncrement();

      #else
      var asyncResult = Begin_atomicIncrement(null, null, tableName, row, column, value);
      return End_atomicIncrement(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_atomicIncrement(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column, long value)
    #else
    public void send_atomicIncrement(byte[] tableName, byte[] row, byte[] column, long value)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("atomicIncrement", TMessageType.Call, seqid_));
      atomicIncrement_args args = new atomicIncrement_args();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.Value = value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_atomicIncrement()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      atomicIncrement_result result = new atomicIncrement_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      if (result.__isset.ia) {
        throw result.Ia;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "atomicIncrement failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteAll(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column)
    {
      return send_deleteAll(callback, state, tableName, row, column);
    }

    public void End_deleteAll(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_deleteAll();
    }

    #endif

    /// <summary>
    /// Delete all cells that match the passed row and column.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">Row to update</param>
    /// <param name="column">name of column whose value is to be deleted</param>
    public void deleteAll(byte[] tableName, byte[] row, byte[] column)
    {
      #if !SILVERLIGHT
      send_deleteAll(tableName, row, column);
      recv_deleteAll();

      #else
      var asyncResult = Begin_deleteAll(null, null, tableName, row, column);
      End_deleteAll(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteAll(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column)
    #else
    public void send_deleteAll(byte[] tableName, byte[] row, byte[] column)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteAll", TMessageType.Call, seqid_));
      deleteAll_args args = new deleteAll_args();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_deleteAll()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteAll_result result = new deleteAll_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteAllTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column, long timestamp)
    {
      return send_deleteAllTs(callback, state, tableName, row, column, timestamp);
    }

    public void End_deleteAllTs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_deleteAllTs();
    }

    #endif

    /// <summary>
    /// Delete all cells that match the passed row and column and whose
    /// timestamp is equal-to or older than the passed timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">Row to update</param>
    /// <param name="column">name of column whose value is to be deleted</param>
    /// <param name="timestamp">timestamp</param>
    public void deleteAllTs(byte[] tableName, byte[] row, byte[] column, long timestamp)
    {
      #if !SILVERLIGHT
      send_deleteAllTs(tableName, row, column, timestamp);
      recv_deleteAllTs();

      #else
      var asyncResult = Begin_deleteAllTs(null, null, tableName, row, column, timestamp);
      End_deleteAllTs(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteAllTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, byte[] column, long timestamp)
    #else
    public void send_deleteAllTs(byte[] tableName, byte[] row, byte[] column, long timestamp)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteAllTs", TMessageType.Call, seqid_));
      deleteAllTs_args args = new deleteAllTs_args();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_deleteAllTs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteAllTs_result result = new deleteAllTs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteAllRow(AsyncCallback callback, object state, byte[] tableName, byte[] row)
    {
      return send_deleteAllRow(callback, state, tableName, row);
    }

    public void End_deleteAllRow(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_deleteAllRow();
    }

    #endif

    /// <summary>
    /// Completely delete the row's cells.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">key of the row to be completely deleted.</param>
    public void deleteAllRow(byte[] tableName, byte[] row)
    {
      #if !SILVERLIGHT
      send_deleteAllRow(tableName, row);
      recv_deleteAllRow();

      #else
      var asyncResult = Begin_deleteAllRow(null, null, tableName, row);
      End_deleteAllRow(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteAllRow(AsyncCallback callback, object state, byte[] tableName, byte[] row)
    #else
    public void send_deleteAllRow(byte[] tableName, byte[] row)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteAllRow", TMessageType.Call, seqid_));
      deleteAllRow_args args = new deleteAllRow_args();
      args.TableName = tableName;
      args.Row = row;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_deleteAllRow()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteAllRow_result result = new deleteAllRow_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteAllRowTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, long timestamp)
    {
      return send_deleteAllRowTs(callback, state, tableName, row, timestamp);
    }

    public void End_deleteAllRowTs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_deleteAllRowTs();
    }

    #endif

    /// <summary>
    /// Completely delete the row's cells marked with a timestamp
    /// equal-to or older than the passed timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">key of the row to be completely deleted.</param>
    /// <param name="timestamp">timestamp</param>
    public void deleteAllRowTs(byte[] tableName, byte[] row, long timestamp)
    {
      #if !SILVERLIGHT
      send_deleteAllRowTs(tableName, row, timestamp);
      recv_deleteAllRowTs();

      #else
      var asyncResult = Begin_deleteAllRowTs(null, null, tableName, row, timestamp);
      End_deleteAllRowTs(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteAllRowTs(AsyncCallback callback, object state, byte[] tableName, byte[] row, long timestamp)
    #else
    public void send_deleteAllRowTs(byte[] tableName, byte[] row, long timestamp)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteAllRowTs", TMessageType.Call, seqid_));
      deleteAllRowTs_args args = new deleteAllRowTs_args();
      args.TableName = tableName;
      args.Row = row;
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_deleteAllRowTs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteAllRowTs_result result = new deleteAllRowTs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_scannerOpen(AsyncCallback callback, object state, byte[] tableName, byte[] startRow, List<byte[]> columns)
    {
      return send_scannerOpen(callback, state, tableName, startRow, columns);
    }

    public int End_scannerOpen(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_scannerOpen();
    }

    #endif

    /// <summary>
    /// Get a scanner on the current table starting at the specified row and
    /// ending at the last row in the table.  Return the specified columns.
    /// 
    /// @return scanner id to be used with other scanner procedures
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startRow">Starting row in table to scan.Send "" (empty string) to start at the first row.</param>
    /// <param name="columns">columns to scan. If column name is a column family, allcolumns of the specified column family are returned. It's also possibleto pass a regex in the column qualifier.</param>
    public int scannerOpen(byte[] tableName, byte[] startRow, List<byte[]> columns)
    {
      #if !SILVERLIGHT
      send_scannerOpen(tableName, startRow, columns);
      return recv_scannerOpen();

      #else
      var asyncResult = Begin_scannerOpen(null, null, tableName, startRow, columns);
      return End_scannerOpen(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_scannerOpen(AsyncCallback callback, object state, byte[] tableName, byte[] startRow, List<byte[]> columns)
    #else
    public void send_scannerOpen(byte[] tableName, byte[] startRow, List<byte[]> columns)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("scannerOpen", TMessageType.Call, seqid_));
      scannerOpen_args args = new scannerOpen_args();
      args.TableName = tableName;
      args.StartRow = startRow;
      args.Columns = columns;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_scannerOpen()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      scannerOpen_result result = new scannerOpen_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpen failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_scannerOpenWithStop(AsyncCallback callback, object state, byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns)
    {
      return send_scannerOpenWithStop(callback, state, tableName, startRow, stopRow, columns);
    }

    public int End_scannerOpenWithStop(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_scannerOpenWithStop();
    }

    #endif

    /// <summary>
    /// Get a scanner on the current table starting and stopping at the
    /// specified rows.  ending at the last row in the table.  Return the
    /// specified columns.
    /// 
    /// @return scanner id to be used with other scanner procedures
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startRow">Starting row in table to scan.Send "" (empty string) to start at the first row.</param>
    /// <param name="stopRow">row to stop scanning on. This row is *not* included in thescanner's results</param>
    /// <param name="columns">columns to scan. If column name is a column family, allcolumns of the specified column family are returned. It's also possibleto pass a regex in the column qualifier.</param>
    public int scannerOpenWithStop(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns)
    {
      #if !SILVERLIGHT
      send_scannerOpenWithStop(tableName, startRow, stopRow, columns);
      return recv_scannerOpenWithStop();

      #else
      var asyncResult = Begin_scannerOpenWithStop(null, null, tableName, startRow, stopRow, columns);
      return End_scannerOpenWithStop(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_scannerOpenWithStop(AsyncCallback callback, object state, byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns)
    #else
    public void send_scannerOpenWithStop(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("scannerOpenWithStop", TMessageType.Call, seqid_));
      scannerOpenWithStop_args args = new scannerOpenWithStop_args();
      args.TableName = tableName;
      args.StartRow = startRow;
      args.StopRow = stopRow;
      args.Columns = columns;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_scannerOpenWithStop()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      scannerOpenWithStop_result result = new scannerOpenWithStop_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpenWithStop failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_scannerOpenWithPrefix(AsyncCallback callback, object state, byte[] tableName, byte[] startAndPrefix, List<byte[]> columns)
    {
      return send_scannerOpenWithPrefix(callback, state, tableName, startAndPrefix, columns);
    }

    public int End_scannerOpenWithPrefix(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_scannerOpenWithPrefix();
    }

    #endif

    /// <summary>
    /// Open a scanner for a given prefix.  That is all rows will have the specified
    /// prefix. No other rows will be returned.
    /// 
    /// @return scanner id to use with other scanner calls
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startAndPrefix">the prefix (and thus start row) of the keys you want</param>
    /// <param name="columns">the columns you want returned</param>
    public int scannerOpenWithPrefix(byte[] tableName, byte[] startAndPrefix, List<byte[]> columns)
    {
      #if !SILVERLIGHT
      send_scannerOpenWithPrefix(tableName, startAndPrefix, columns);
      return recv_scannerOpenWithPrefix();

      #else
      var asyncResult = Begin_scannerOpenWithPrefix(null, null, tableName, startAndPrefix, columns);
      return End_scannerOpenWithPrefix(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_scannerOpenWithPrefix(AsyncCallback callback, object state, byte[] tableName, byte[] startAndPrefix, List<byte[]> columns)
    #else
    public void send_scannerOpenWithPrefix(byte[] tableName, byte[] startAndPrefix, List<byte[]> columns)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("scannerOpenWithPrefix", TMessageType.Call, seqid_));
      scannerOpenWithPrefix_args args = new scannerOpenWithPrefix_args();
      args.TableName = tableName;
      args.StartAndPrefix = startAndPrefix;
      args.Columns = columns;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_scannerOpenWithPrefix()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      scannerOpenWithPrefix_result result = new scannerOpenWithPrefix_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpenWithPrefix failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_scannerOpenTs(AsyncCallback callback, object state, byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp)
    {
      return send_scannerOpenTs(callback, state, tableName, startRow, columns, timestamp);
    }

    public int End_scannerOpenTs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_scannerOpenTs();
    }

    #endif

    /// <summary>
    /// Get a scanner on the current table starting at the specified row and
    /// ending at the last row in the table.  Return the specified columns.
    /// Only values with the specified timestamp are returned.
    /// 
    /// @return scanner id to be used with other scanner procedures
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startRow">Starting row in table to scan.Send "" (empty string) to start at the first row.</param>
    /// <param name="columns">columns to scan. If column name is a column family, allcolumns of the specified column family are returned. It's also possibleto pass a regex in the column qualifier.</param>
    /// <param name="timestamp">timestamp</param>
    public int scannerOpenTs(byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp)
    {
      #if !SILVERLIGHT
      send_scannerOpenTs(tableName, startRow, columns, timestamp);
      return recv_scannerOpenTs();

      #else
      var asyncResult = Begin_scannerOpenTs(null, null, tableName, startRow, columns, timestamp);
      return End_scannerOpenTs(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_scannerOpenTs(AsyncCallback callback, object state, byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp)
    #else
    public void send_scannerOpenTs(byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("scannerOpenTs", TMessageType.Call, seqid_));
      scannerOpenTs_args args = new scannerOpenTs_args();
      args.TableName = tableName;
      args.StartRow = startRow;
      args.Columns = columns;
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_scannerOpenTs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      scannerOpenTs_result result = new scannerOpenTs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpenTs failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_scannerOpenWithStopTs(AsyncCallback callback, object state, byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, long timestamp)
    {
      return send_scannerOpenWithStopTs(callback, state, tableName, startRow, stopRow, columns, timestamp);
    }

    public int End_scannerOpenWithStopTs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_scannerOpenWithStopTs();
    }

    #endif

    /// <summary>
    /// Get a scanner on the current table starting and stopping at the
    /// specified rows.  ending at the last row in the table.  Return the
    /// specified columns.  Only values with the specified timestamp are
    /// returned.
    /// 
    /// @return scanner id to be used with other scanner procedures
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startRow">Starting row in table to scan.Send "" (empty string) to start at the first row.</param>
    /// <param name="stopRow">row to stop scanning on. This row is *not* included in thescanner's results</param>
    /// <param name="columns">columns to scan. If column name is a column family, allcolumns of the specified column family are returned. It's also possibleto pass a regex in the column qualifier.</param>
    /// <param name="timestamp">timestamp</param>
    public int scannerOpenWithStopTs(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, long timestamp)
    {
      #if !SILVERLIGHT
      send_scannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp);
      return recv_scannerOpenWithStopTs();

      #else
      var asyncResult = Begin_scannerOpenWithStopTs(null, null, tableName, startRow, stopRow, columns, timestamp);
      return End_scannerOpenWithStopTs(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_scannerOpenWithStopTs(AsyncCallback callback, object state, byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, long timestamp)
    #else
    public void send_scannerOpenWithStopTs(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, long timestamp)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("scannerOpenWithStopTs", TMessageType.Call, seqid_));
      scannerOpenWithStopTs_args args = new scannerOpenWithStopTs_args();
      args.TableName = tableName;
      args.StartRow = startRow;
      args.StopRow = stopRow;
      args.Columns = columns;
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_scannerOpenWithStopTs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      scannerOpenWithStopTs_result result = new scannerOpenWithStopTs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpenWithStopTs failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_scannerGet(AsyncCallback callback, object state, int id)
    {
      return send_scannerGet(callback, state, id);
    }

    public List<TRowResult> End_scannerGet(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_scannerGet();
    }

    #endif

    /// <summary>
    /// Returns the scanner's current row value and advances to the next
    /// row in the table.  When there are no more rows in the table, or a key
    /// greater-than-or-equal-to the scanner's specified stopRow is reached,
    /// an empty list is returned.
    /// 
    /// @return a TRowResult containing the current row and a map of the columns to TCells.
    /// 
    /// @throws IllegalArgument if ScannerID is invalid
    /// 
    /// @throws NotFound when the scanner reaches the end
    /// </summary>
    /// <param name="id">id of a scanner returned by scannerOpen</param>
    public List<TRowResult> scannerGet(int id)
    {
      #if !SILVERLIGHT
      send_scannerGet(id);
      return recv_scannerGet();

      #else
      var asyncResult = Begin_scannerGet(null, null, id);
      return End_scannerGet(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_scannerGet(AsyncCallback callback, object state, int id)
    #else
    public void send_scannerGet(int id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("scannerGet", TMessageType.Call, seqid_));
      scannerGet_args args = new scannerGet_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TRowResult> recv_scannerGet()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      scannerGet_result result = new scannerGet_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      if (result.__isset.ia) {
        throw result.Ia;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerGet failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_scannerGetList(AsyncCallback callback, object state, int id, int nbRows)
    {
      return send_scannerGetList(callback, state, id, nbRows);
    }

    public List<TRowResult> End_scannerGetList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_scannerGetList();
    }

    #endif

    /// <summary>
    /// Returns, starting at the scanner's current row value nbRows worth of
    /// rows and advances to the next row in the table.  When there are no more
    /// rows in the table, or a key greater-than-or-equal-to the scanner's
    /// specified stopRow is reached,  an empty list is returned.
    /// 
    /// @return a TRowResult containing the current row and a map of the columns to TCells.
    /// 
    /// @throws IllegalArgument if ScannerID is invalid
    /// 
    /// @throws NotFound when the scanner reaches the end
    /// </summary>
    /// <param name="id">id of a scanner returned by scannerOpen</param>
    /// <param name="nbRows">number of results to return</param>
    public List<TRowResult> scannerGetList(int id, int nbRows)
    {
      #if !SILVERLIGHT
      send_scannerGetList(id, nbRows);
      return recv_scannerGetList();

      #else
      var asyncResult = Begin_scannerGetList(null, null, id, nbRows);
      return End_scannerGetList(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_scannerGetList(AsyncCallback callback, object state, int id, int nbRows)
    #else
    public void send_scannerGetList(int id, int nbRows)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("scannerGetList", TMessageType.Call, seqid_));
      scannerGetList_args args = new scannerGetList_args();
      args.Id = id;
      args.NbRows = nbRows;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TRowResult> recv_scannerGetList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      scannerGetList_result result = new scannerGetList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      if (result.__isset.ia) {
        throw result.Ia;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerGetList failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_scannerClose(AsyncCallback callback, object state, int id)
    {
      return send_scannerClose(callback, state, id);
    }

    public void End_scannerClose(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_scannerClose();
    }

    #endif

    /// <summary>
    /// Closes the server-state associated with an open scanner.
    /// 
    /// @throws IllegalArgument if ScannerID is invalid
    /// </summary>
    /// <param name="id">id of a scanner returned by scannerOpen</param>
    public void scannerClose(int id)
    {
      #if !SILVERLIGHT
      send_scannerClose(id);
      recv_scannerClose();

      #else
      var asyncResult = Begin_scannerClose(null, null, id);
      End_scannerClose(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_scannerClose(AsyncCallback callback, object state, int id)
    #else
    public void send_scannerClose(int id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("scannerClose", TMessageType.Call, seqid_));
      scannerClose_args args = new scannerClose_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_scannerClose()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      scannerClose_result result = new scannerClose_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      if (result.__isset.ia) {
        throw result.Ia;
      }
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["enableTable"] = enableTable_Process;
      processMap_["disableTable"] = disableTable_Process;
      processMap_["isTableEnabled"] = isTableEnabled_Process;
      processMap_["compact"] = compact_Process;
      processMap_["majorCompact"] = majorCompact_Process;
      processMap_["getTableNames"] = getTableNames_Process;
      processMap_["getColumnDescriptors"] = getColumnDescriptors_Process;
      processMap_["getTableRegions"] = getTableRegions_Process;
      processMap_["createTable"] = createTable_Process;
      processMap_["deleteTable"] = deleteTable_Process;
      processMap_["get"] = get_Process;
      processMap_["getVer"] = getVer_Process;
      processMap_["getVerTs"] = getVerTs_Process;
      processMap_["getRow"] = getRow_Process;
      processMap_["getRowWithColumns"] = getRowWithColumns_Process;
      processMap_["getRowTs"] = getRowTs_Process;
      processMap_["getRowWithColumnsTs"] = getRowWithColumnsTs_Process;
      processMap_["getRows"] = getRows_Process;
      processMap_["getRowsWithColumns"] = getRowsWithColumns_Process;
      processMap_["getRowsTs"] = getRowsTs_Process;
      processMap_["getRowsWithColumnsTs"] = getRowsWithColumnsTs_Process;
      processMap_["mutateRow"] = mutateRow_Process;
      processMap_["mutateRowTs"] = mutateRowTs_Process;
      processMap_["mutateRows"] = mutateRows_Process;
      processMap_["mutateRowsTs"] = mutateRowsTs_Process;
      processMap_["atomicIncrement"] = atomicIncrement_Process;
      processMap_["deleteAll"] = deleteAll_Process;
      processMap_["deleteAllTs"] = deleteAllTs_Process;
      processMap_["deleteAllRow"] = deleteAllRow_Process;
      processMap_["deleteAllRowTs"] = deleteAllRowTs_Process;
      processMap_["scannerOpen"] = scannerOpen_Process;
      processMap_["scannerOpenWithStop"] = scannerOpenWithStop_Process;
      processMap_["scannerOpenWithPrefix"] = scannerOpenWithPrefix_Process;
      processMap_["scannerOpenTs"] = scannerOpenTs_Process;
      processMap_["scannerOpenWithStopTs"] = scannerOpenWithStopTs_Process;
      processMap_["scannerGet"] = scannerGet_Process;
      processMap_["scannerGetList"] = scannerGetList_Process;
      processMap_["scannerClose"] = scannerClose_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void enableTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      enableTable_args args = new enableTable_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      enableTable_result result = new enableTable_result();
      try {
        iface_.enableTable(args.TableName);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("enableTable", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void disableTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disableTable_args args = new disableTable_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disableTable_result result = new disableTable_result();
      try {
        iface_.disableTable(args.TableName);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("disableTable", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isTableEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isTableEnabled_args args = new isTableEnabled_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isTableEnabled_result result = new isTableEnabled_result();
      try {
        result.Success = iface_.isTableEnabled(args.TableName);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("isTableEnabled", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void compact_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      compact_args args = new compact_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      compact_result result = new compact_result();
      try {
        iface_.compact(args.TableNameOrRegionName);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("compact", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void majorCompact_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      majorCompact_args args = new majorCompact_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      majorCompact_result result = new majorCompact_result();
      try {
        iface_.majorCompact(args.TableNameOrRegionName);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("majorCompact", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getTableNames_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getTableNames_args args = new getTableNames_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getTableNames_result result = new getTableNames_result();
      try {
        result.Success = iface_.getTableNames();
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getTableNames", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getColumnDescriptors_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getColumnDescriptors_args args = new getColumnDescriptors_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getColumnDescriptors_result result = new getColumnDescriptors_result();
      try {
        result.Success = iface_.getColumnDescriptors(args.TableName);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getColumnDescriptors", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getTableRegions_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getTableRegions_args args = new getTableRegions_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getTableRegions_result result = new getTableRegions_result();
      try {
        result.Success = iface_.getTableRegions(args.TableName);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getTableRegions", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createTable_args args = new createTable_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createTable_result result = new createTable_result();
      try {
        iface_.createTable(args.TableName, args.ColumnFamilies);
      } catch (IOError io) {
        result.Io = io;
      } catch (IllegalArgument ia) {
        result.Ia = ia;
      } catch (AlreadyExists exist) {
        result.Exist = exist;
      }
      oprot.WriteMessageBegin(new TMessage("createTable", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteTable_args args = new deleteTable_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteTable_result result = new deleteTable_result();
      try {
        iface_.deleteTable(args.TableName);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("deleteTable", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_args args = new get_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_result result = new get_result();
      try {
        result.Success = iface_.get(args.TableName, args.Row, args.Column);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("get", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getVer_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getVer_args args = new getVer_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getVer_result result = new getVer_result();
      try {
        result.Success = iface_.getVer(args.TableName, args.Row, args.Column, args.NumVersions);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getVer", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getVerTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getVerTs_args args = new getVerTs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getVerTs_result result = new getVerTs_result();
      try {
        result.Success = iface_.getVerTs(args.TableName, args.Row, args.Column, args.Timestamp, args.NumVersions);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getVerTs", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRow_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRow_args args = new getRow_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRow_result result = new getRow_result();
      try {
        result.Success = iface_.getRow(args.TableName, args.Row);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getRow", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRowWithColumns_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRowWithColumns_args args = new getRowWithColumns_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRowWithColumns_result result = new getRowWithColumns_result();
      try {
        result.Success = iface_.getRowWithColumns(args.TableName, args.Row, args.Columns);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getRowWithColumns", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRowTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRowTs_args args = new getRowTs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRowTs_result result = new getRowTs_result();
      try {
        result.Success = iface_.getRowTs(args.TableName, args.Row, args.Timestamp);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getRowTs", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRowWithColumnsTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRowWithColumnsTs_args args = new getRowWithColumnsTs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRowWithColumnsTs_result result = new getRowWithColumnsTs_result();
      try {
        result.Success = iface_.getRowWithColumnsTs(args.TableName, args.Row, args.Columns, args.Timestamp);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getRowWithColumnsTs", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRows_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRows_args args = new getRows_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRows_result result = new getRows_result();
      try {
        result.Success = iface_.getRows(args.TableName, args.Rows);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getRows", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRowsWithColumns_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRowsWithColumns_args args = new getRowsWithColumns_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRowsWithColumns_result result = new getRowsWithColumns_result();
      try {
        result.Success = iface_.getRowsWithColumns(args.TableName, args.Rows, args.Columns);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getRowsWithColumns", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRowsTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRowsTs_args args = new getRowsTs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRowsTs_result result = new getRowsTs_result();
      try {
        result.Success = iface_.getRowsTs(args.TableName, args.Rows, args.Timestamp);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getRowsTs", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRowsWithColumnsTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRowsWithColumnsTs_args args = new getRowsWithColumnsTs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRowsWithColumnsTs_result result = new getRowsWithColumnsTs_result();
      try {
        result.Success = iface_.getRowsWithColumnsTs(args.TableName, args.Rows, args.Columns, args.Timestamp);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getRowsWithColumnsTs", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void mutateRow_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      mutateRow_args args = new mutateRow_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      mutateRow_result result = new mutateRow_result();
      try {
        iface_.mutateRow(args.TableName, args.Row, args.Mutations);
      } catch (IOError io) {
        result.Io = io;
      } catch (IllegalArgument ia) {
        result.Ia = ia;
      }
      oprot.WriteMessageBegin(new TMessage("mutateRow", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void mutateRowTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      mutateRowTs_args args = new mutateRowTs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      mutateRowTs_result result = new mutateRowTs_result();
      try {
        iface_.mutateRowTs(args.TableName, args.Row, args.Mutations, args.Timestamp);
      } catch (IOError io) {
        result.Io = io;
      } catch (IllegalArgument ia) {
        result.Ia = ia;
      }
      oprot.WriteMessageBegin(new TMessage("mutateRowTs", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void mutateRows_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      mutateRows_args args = new mutateRows_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      mutateRows_result result = new mutateRows_result();
      try {
        iface_.mutateRows(args.TableName, args.RowBatches);
      } catch (IOError io) {
        result.Io = io;
      } catch (IllegalArgument ia) {
        result.Ia = ia;
      }
      oprot.WriteMessageBegin(new TMessage("mutateRows", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void mutateRowsTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      mutateRowsTs_args args = new mutateRowsTs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      mutateRowsTs_result result = new mutateRowsTs_result();
      try {
        iface_.mutateRowsTs(args.TableName, args.RowBatches, args.Timestamp);
      } catch (IOError io) {
        result.Io = io;
      } catch (IllegalArgument ia) {
        result.Ia = ia;
      }
      oprot.WriteMessageBegin(new TMessage("mutateRowsTs", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void atomicIncrement_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      atomicIncrement_args args = new atomicIncrement_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      atomicIncrement_result result = new atomicIncrement_result();
      try {
        result.Success = iface_.atomicIncrement(args.TableName, args.Row, args.Column, args.Value);
      } catch (IOError io) {
        result.Io = io;
      } catch (IllegalArgument ia) {
        result.Ia = ia;
      }
      oprot.WriteMessageBegin(new TMessage("atomicIncrement", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteAll_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteAll_args args = new deleteAll_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteAll_result result = new deleteAll_result();
      try {
        iface_.deleteAll(args.TableName, args.Row, args.Column);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("deleteAll", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteAllTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteAllTs_args args = new deleteAllTs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteAllTs_result result = new deleteAllTs_result();
      try {
        iface_.deleteAllTs(args.TableName, args.Row, args.Column, args.Timestamp);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("deleteAllTs", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteAllRow_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteAllRow_args args = new deleteAllRow_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteAllRow_result result = new deleteAllRow_result();
      try {
        iface_.deleteAllRow(args.TableName, args.Row);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("deleteAllRow", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteAllRowTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteAllRowTs_args args = new deleteAllRowTs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteAllRowTs_result result = new deleteAllRowTs_result();
      try {
        iface_.deleteAllRowTs(args.TableName, args.Row, args.Timestamp);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("deleteAllRowTs", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void scannerOpen_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      scannerOpen_args args = new scannerOpen_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      scannerOpen_result result = new scannerOpen_result();
      try {
        result.Success = iface_.scannerOpen(args.TableName, args.StartRow, args.Columns);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("scannerOpen", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void scannerOpenWithStop_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      scannerOpenWithStop_args args = new scannerOpenWithStop_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      scannerOpenWithStop_result result = new scannerOpenWithStop_result();
      try {
        result.Success = iface_.scannerOpenWithStop(args.TableName, args.StartRow, args.StopRow, args.Columns);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("scannerOpenWithStop", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void scannerOpenWithPrefix_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      scannerOpenWithPrefix_args args = new scannerOpenWithPrefix_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      scannerOpenWithPrefix_result result = new scannerOpenWithPrefix_result();
      try {
        result.Success = iface_.scannerOpenWithPrefix(args.TableName, args.StartAndPrefix, args.Columns);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("scannerOpenWithPrefix", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void scannerOpenTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      scannerOpenTs_args args = new scannerOpenTs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      scannerOpenTs_result result = new scannerOpenTs_result();
      try {
        result.Success = iface_.scannerOpenTs(args.TableName, args.StartRow, args.Columns, args.Timestamp);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("scannerOpenTs", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void scannerOpenWithStopTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      scannerOpenWithStopTs_args args = new scannerOpenWithStopTs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      scannerOpenWithStopTs_result result = new scannerOpenWithStopTs_result();
      try {
        result.Success = iface_.scannerOpenWithStopTs(args.TableName, args.StartRow, args.StopRow, args.Columns, args.Timestamp);
      } catch (IOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("scannerOpenWithStopTs", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void scannerGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      scannerGet_args args = new scannerGet_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      scannerGet_result result = new scannerGet_result();
      try {
        result.Success = iface_.scannerGet(args.Id);
      } catch (IOError io) {
        result.Io = io;
      } catch (IllegalArgument ia) {
        result.Ia = ia;
      }
      oprot.WriteMessageBegin(new TMessage("scannerGet", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void scannerGetList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      scannerGetList_args args = new scannerGetList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      scannerGetList_result result = new scannerGetList_result();
      try {
        result.Success = iface_.scannerGetList(args.Id, args.NbRows);
      } catch (IOError io) {
        result.Io = io;
      } catch (IllegalArgument ia) {
        result.Ia = ia;
      }
      oprot.WriteMessageBegin(new TMessage("scannerGetList", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void scannerClose_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      scannerClose_args args = new scannerClose_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      scannerClose_result result = new scannerClose_result();
      try {
        iface_.scannerClose(args.Id);
      } catch (IOError io) {
        result.Io = io;
      } catch (IllegalArgument ia) {
        result.Ia = ia;
      }
      oprot.WriteMessageBegin(new TMessage("scannerClose", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enableTable_args : TBase
  {
    private byte[] _tableName;

    /// <summary>
    /// name of the table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
    }

    public enableTable_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("enableTable_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("enableTable_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enableTable_result : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public enableTable_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("enableTable_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("enableTable_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disableTable_args : TBase
  {
    private byte[] _tableName;

    /// <summary>
    /// name of the table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
    }

    public disableTable_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("disableTable_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("disableTable_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disableTable_result : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public disableTable_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("disableTable_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("disableTable_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isTableEnabled_args : TBase
  {
    private byte[] _tableName;

    /// <summary>
    /// name of the table to check
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
    }

    public isTableEnabled_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("isTableEnabled_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("isTableEnabled_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isTableEnabled_result : TBase
  {
    private bool _success;
    private IOError _io;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public isTableEnabled_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              Success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("isTableEnabled_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("isTableEnabled_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class compact_args : TBase
  {
    private byte[] _tableNameOrRegionName;

    public byte[] TableNameOrRegionName
    {
      get
      {
        return _tableNameOrRegionName;
      }
      set
      {
        __isset.tableNameOrRegionName = true;
        this._tableNameOrRegionName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableNameOrRegionName;
    }

    public compact_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableNameOrRegionName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("compact_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableNameOrRegionName != null && __isset.tableNameOrRegionName) {
        field.Name = "tableNameOrRegionName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableNameOrRegionName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("compact_args(");
      sb.Append("TableNameOrRegionName: ");
      sb.Append(TableNameOrRegionName);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class compact_result : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public compact_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("compact_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("compact_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class majorCompact_args : TBase
  {
    private byte[] _tableNameOrRegionName;

    public byte[] TableNameOrRegionName
    {
      get
      {
        return _tableNameOrRegionName;
      }
      set
      {
        __isset.tableNameOrRegionName = true;
        this._tableNameOrRegionName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableNameOrRegionName;
    }

    public majorCompact_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableNameOrRegionName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("majorCompact_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableNameOrRegionName != null && __isset.tableNameOrRegionName) {
        field.Name = "tableNameOrRegionName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableNameOrRegionName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("majorCompact_args(");
      sb.Append("TableNameOrRegionName: ");
      sb.Append(TableNameOrRegionName);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class majorCompact_result : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public majorCompact_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("majorCompact_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("majorCompact_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTableNames_args : TBase
  {

    public getTableNames_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getTableNames_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getTableNames_args(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTableNames_result : TBase
  {
    private List<byte[]> _success;
    private IOError _io;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getTableNames_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<byte[]>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  byte[] _elem11 = null;
                  _elem11 = iprot.ReadBinary();
                  Success.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getTableNames_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (byte[] _iter12 in Success)
            {
              oprot.WriteBinary(_iter12);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getTableNames_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getColumnDescriptors_args : TBase
  {
    private byte[] _tableName;

    /// <summary>
    /// table name
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
    }

    public getColumnDescriptors_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getColumnDescriptors_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getColumnDescriptors_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getColumnDescriptors_result : TBase
  {
    private Dictionary<byte[], ColumnDescriptor> _success;
    private IOError _io;

    public Dictionary<byte[], ColumnDescriptor> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getColumnDescriptors_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Map) {
              {
                Success = new Dictionary<byte[], ColumnDescriptor>();
                TMap _map13 = iprot.ReadMapBegin();
                for( int _i14 = 0; _i14 < _map13.Count; ++_i14)
                {
                  byte[] _key15;
                  ColumnDescriptor _val16;
                  _key15 = iprot.ReadBinary();
                  _val16 = new ColumnDescriptor();
                  _val16.Read(iprot);
                  Success[_key15] = _val16;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getColumnDescriptors_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
            foreach (byte[] _iter17 in Success.Keys)
            {
              oprot.WriteBinary(_iter17);
              Success[_iter17].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getColumnDescriptors_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTableRegions_args : TBase
  {
    private byte[] _tableName;

    /// <summary>
    /// table name
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
    }

    public getTableRegions_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getTableRegions_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getTableRegions_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTableRegions_result : TBase
  {
    private List<TRegionInfo> _success;
    private IOError _io;

    public List<TRegionInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getTableRegions_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TRegionInfo>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  TRegionInfo _elem20 = new TRegionInfo();
                  _elem20 = new TRegionInfo();
                  _elem20.Read(iprot);
                  Success.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getTableRegions_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TRegionInfo _iter21 in Success)
            {
              _iter21.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getTableRegions_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createTable_args : TBase
  {
    private byte[] _tableName;
    private List<ColumnDescriptor> _columnFamilies;

    /// <summary>
    /// name of table to create
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// list of column family descriptors
    /// </summary>
    public List<ColumnDescriptor> ColumnFamilies
    {
      get
      {
        return _columnFamilies;
      }
      set
      {
        __isset.columnFamilies = true;
        this._columnFamilies = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool columnFamilies;
    }

    public createTable_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                ColumnFamilies = new List<ColumnDescriptor>();
                TList _list22 = iprot.ReadListBegin();
                for( int _i23 = 0; _i23 < _list22.Count; ++_i23)
                {
                  ColumnDescriptor _elem24 = new ColumnDescriptor();
                  _elem24 = new ColumnDescriptor();
                  _elem24.Read(iprot);
                  ColumnFamilies.Add(_elem24);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("createTable_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (ColumnFamilies != null && __isset.columnFamilies) {
        field.Name = "columnFamilies";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ColumnFamilies.Count));
          foreach (ColumnDescriptor _iter25 in ColumnFamilies)
          {
            _iter25.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("createTable_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",ColumnFamilies: ");
      sb.Append(ColumnFamilies);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createTable_result : TBase
  {
    private IOError _io;
    private IllegalArgument _ia;
    private AlreadyExists _exist;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }

    public AlreadyExists Exist
    {
      get
      {
        return _exist;
      }
      set
      {
        __isset.exist = true;
        this._exist = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
      public bool ia;
      public bool exist;
    }

    public createTable_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ia = new IllegalArgument();
              Ia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Exist = new AlreadyExists();
              Exist.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("createTable_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ia) {
        if (Ia != null) {
          field.Name = "Ia";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ia.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.exist) {
        if (Exist != null) {
          field.Name = "Exist";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Exist.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("createTable_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(",Ia: ");
      sb.Append(Ia== null ? "<null>" : Ia.ToString());
      sb.Append(",Exist: ");
      sb.Append(Exist== null ? "<null>" : Exist.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteTable_args : TBase
  {
    private byte[] _tableName;

    /// <summary>
    /// name of table to delete
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
    }

    public deleteTable_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteTable_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteTable_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteTable_result : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public deleteTable_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteTable_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteTable_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// column name
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
      public bool column;
    }

    public get_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Column = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (Column != null && __isset.column) {
        field.Name = "column";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Column);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Column: ");
      sb.Append(Column);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_result : TBase
  {
    private List<TCell> _success;
    private IOError _io;

    public List<TCell> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public get_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TCell>();
                TList _list26 = iprot.ReadListBegin();
                for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                {
                  TCell _elem28 = new TCell();
                  _elem28 = new TCell();
                  _elem28.Read(iprot);
                  Success.Add(_elem28);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TCell _iter29 in Success)
            {
              _iter29.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getVer_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;
    private int _numVersions;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// column name
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    /// <summary>
    /// number of versions to retrieve
    /// </summary>
    public int NumVersions
    {
      get
      {
        return _numVersions;
      }
      set
      {
        __isset.numVersions = true;
        this._numVersions = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
      public bool column;
      public bool numVersions;
    }

    public getVer_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Column = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              NumVersions = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getVer_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (Column != null && __isset.column) {
        field.Name = "column";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Column);
        oprot.WriteFieldEnd();
      }
      if (__isset.numVersions) {
        field.Name = "numVersions";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumVersions);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getVer_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Column: ");
      sb.Append(Column);
      sb.Append(",NumVersions: ");
      sb.Append(NumVersions);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getVer_result : TBase
  {
    private List<TCell> _success;
    private IOError _io;

    public List<TCell> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getVer_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TCell>();
                TList _list30 = iprot.ReadListBegin();
                for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                {
                  TCell _elem32 = new TCell();
                  _elem32 = new TCell();
                  _elem32.Read(iprot);
                  Success.Add(_elem32);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getVer_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TCell _iter33 in Success)
            {
              _iter33.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getVer_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getVerTs_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;
    private long _timestamp;
    private int _numVersions;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// column name
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// number of versions to retrieve
    /// </summary>
    public int NumVersions
    {
      get
      {
        return _numVersions;
      }
      set
      {
        __isset.numVersions = true;
        this._numVersions = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
      public bool column;
      public bool timestamp;
      public bool numVersions;
    }

    public getVerTs_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Column = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              NumVersions = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getVerTs_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (Column != null && __isset.column) {
        field.Name = "column";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Column);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.numVersions) {
        field.Name = "numVersions";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumVersions);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getVerTs_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Column: ");
      sb.Append(Column);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",NumVersions: ");
      sb.Append(NumVersions);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getVerTs_result : TBase
  {
    private List<TCell> _success;
    private IOError _io;

    public List<TCell> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getVerTs_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TCell>();
                TList _list34 = iprot.ReadListBegin();
                for( int _i35 = 0; _i35 < _list34.Count; ++_i35)
                {
                  TCell _elem36 = new TCell();
                  _elem36 = new TCell();
                  _elem36.Read(iprot);
                  Success.Add(_elem36);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getVerTs_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TCell _iter37 in Success)
            {
              _iter37.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getVerTs_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRow_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
    }

    public getRow_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRow_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRow_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRow_result : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getRow_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TRowResult>();
                TList _list38 = iprot.ReadListBegin();
                for( int _i39 = 0; _i39 < _list38.Count; ++_i39)
                {
                  TRowResult _elem40 = new TRowResult();
                  _elem40 = new TRowResult();
                  _elem40.Read(iprot);
                  Success.Add(_elem40);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRow_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TRowResult _iter41 in Success)
            {
              _iter41.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRow_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRowWithColumns_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private List<byte[]> _columns;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// List of columns to return, null for all columns
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
      public bool columns;
    }

    public getRowWithColumns_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Columns = new List<byte[]>();
                TList _list42 = iprot.ReadListBegin();
                for( int _i43 = 0; _i43 < _list42.Count; ++_i43)
                {
                  byte[] _elem44 = null;
                  _elem44 = iprot.ReadBinary();
                  Columns.Add(_elem44);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRowWithColumns_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Columns.Count));
          foreach (byte[] _iter45 in Columns)
          {
            oprot.WriteBinary(_iter45);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRowWithColumns_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRowWithColumns_result : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getRowWithColumns_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TRowResult>();
                TList _list46 = iprot.ReadListBegin();
                for( int _i47 = 0; _i47 < _list46.Count; ++_i47)
                {
                  TRowResult _elem48 = new TRowResult();
                  _elem48 = new TRowResult();
                  _elem48.Read(iprot);
                  Success.Add(_elem48);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRowWithColumns_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TRowResult _iter49 in Success)
            {
              _iter49.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRowWithColumns_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRowTs_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private long _timestamp;

    /// <summary>
    /// name of the table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
      public bool timestamp;
    }

    public getRowTs_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRowTs_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRowTs_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRowTs_result : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getRowTs_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TRowResult>();
                TList _list50 = iprot.ReadListBegin();
                for( int _i51 = 0; _i51 < _list50.Count; ++_i51)
                {
                  TRowResult _elem52 = new TRowResult();
                  _elem52 = new TRowResult();
                  _elem52.Read(iprot);
                  Success.Add(_elem52);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRowTs_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TRowResult _iter53 in Success)
            {
              _iter53.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRowTs_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRowWithColumnsTs_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private List<byte[]> _columns;
    private long _timestamp;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// List of columns to return, null for all columns
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
      public bool columns;
      public bool timestamp;
    }

    public getRowWithColumnsTs_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Columns = new List<byte[]>();
                TList _list54 = iprot.ReadListBegin();
                for( int _i55 = 0; _i55 < _list54.Count; ++_i55)
                {
                  byte[] _elem56 = null;
                  _elem56 = iprot.ReadBinary();
                  Columns.Add(_elem56);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRowWithColumnsTs_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Columns.Count));
          foreach (byte[] _iter57 in Columns)
          {
            oprot.WriteBinary(_iter57);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRowWithColumnsTs_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRowWithColumnsTs_result : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getRowWithColumnsTs_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TRowResult>();
                TList _list58 = iprot.ReadListBegin();
                for( int _i59 = 0; _i59 < _list58.Count; ++_i59)
                {
                  TRowResult _elem60 = new TRowResult();
                  _elem60 = new TRowResult();
                  _elem60.Read(iprot);
                  Success.Add(_elem60);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRowWithColumnsTs_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TRowResult _iter61 in Success)
            {
              _iter61.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRowWithColumnsTs_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRows_args : TBase
  {
    private byte[] _tableName;
    private List<byte[]> _rows;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row keys
    /// </summary>
    public List<byte[]> Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool rows;
    }

    public getRows_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Rows = new List<byte[]>();
                TList _list62 = iprot.ReadListBegin();
                for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
                {
                  byte[] _elem64 = null;
                  _elem64 = iprot.ReadBinary();
                  Rows.Add(_elem64);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRows_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Rows != null && __isset.rows) {
        field.Name = "rows";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Rows.Count));
          foreach (byte[] _iter65 in Rows)
          {
            oprot.WriteBinary(_iter65);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRows_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Rows: ");
      sb.Append(Rows);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRows_result : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getRows_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TRowResult>();
                TList _list66 = iprot.ReadListBegin();
                for( int _i67 = 0; _i67 < _list66.Count; ++_i67)
                {
                  TRowResult _elem68 = new TRowResult();
                  _elem68 = new TRowResult();
                  _elem68.Read(iprot);
                  Success.Add(_elem68);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRows_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TRowResult _iter69 in Success)
            {
              _iter69.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRows_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRowsWithColumns_args : TBase
  {
    private byte[] _tableName;
    private List<byte[]> _rows;
    private List<byte[]> _columns;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row keys
    /// </summary>
    public List<byte[]> Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }

    /// <summary>
    /// List of columns to return, null for all columns
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool rows;
      public bool columns;
    }

    public getRowsWithColumns_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Rows = new List<byte[]>();
                TList _list70 = iprot.ReadListBegin();
                for( int _i71 = 0; _i71 < _list70.Count; ++_i71)
                {
                  byte[] _elem72 = null;
                  _elem72 = iprot.ReadBinary();
                  Rows.Add(_elem72);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Columns = new List<byte[]>();
                TList _list73 = iprot.ReadListBegin();
                for( int _i74 = 0; _i74 < _list73.Count; ++_i74)
                {
                  byte[] _elem75 = null;
                  _elem75 = iprot.ReadBinary();
                  Columns.Add(_elem75);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRowsWithColumns_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Rows != null && __isset.rows) {
        field.Name = "rows";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Rows.Count));
          foreach (byte[] _iter76 in Rows)
          {
            oprot.WriteBinary(_iter76);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Columns.Count));
          foreach (byte[] _iter77 in Columns)
          {
            oprot.WriteBinary(_iter77);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRowsWithColumns_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Rows: ");
      sb.Append(Rows);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRowsWithColumns_result : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getRowsWithColumns_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TRowResult>();
                TList _list78 = iprot.ReadListBegin();
                for( int _i79 = 0; _i79 < _list78.Count; ++_i79)
                {
                  TRowResult _elem80 = new TRowResult();
                  _elem80 = new TRowResult();
                  _elem80.Read(iprot);
                  Success.Add(_elem80);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRowsWithColumns_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TRowResult _iter81 in Success)
            {
              _iter81.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRowsWithColumns_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRowsTs_args : TBase
  {
    private byte[] _tableName;
    private List<byte[]> _rows;
    private long _timestamp;

    /// <summary>
    /// name of the table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row keys
    /// </summary>
    public List<byte[]> Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool rows;
      public bool timestamp;
    }

    public getRowsTs_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Rows = new List<byte[]>();
                TList _list82 = iprot.ReadListBegin();
                for( int _i83 = 0; _i83 < _list82.Count; ++_i83)
                {
                  byte[] _elem84 = null;
                  _elem84 = iprot.ReadBinary();
                  Rows.Add(_elem84);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRowsTs_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Rows != null && __isset.rows) {
        field.Name = "rows";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Rows.Count));
          foreach (byte[] _iter85 in Rows)
          {
            oprot.WriteBinary(_iter85);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRowsTs_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Rows: ");
      sb.Append(Rows);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRowsTs_result : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getRowsTs_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TRowResult>();
                TList _list86 = iprot.ReadListBegin();
                for( int _i87 = 0; _i87 < _list86.Count; ++_i87)
                {
                  TRowResult _elem88 = new TRowResult();
                  _elem88 = new TRowResult();
                  _elem88.Read(iprot);
                  Success.Add(_elem88);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRowsTs_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TRowResult _iter89 in Success)
            {
              _iter89.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRowsTs_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRowsWithColumnsTs_args : TBase
  {
    private byte[] _tableName;
    private List<byte[]> _rows;
    private List<byte[]> _columns;
    private long _timestamp;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row keys
    /// </summary>
    public List<byte[]> Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }

    /// <summary>
    /// List of columns to return, null for all columns
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool rows;
      public bool columns;
      public bool timestamp;
    }

    public getRowsWithColumnsTs_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Rows = new List<byte[]>();
                TList _list90 = iprot.ReadListBegin();
                for( int _i91 = 0; _i91 < _list90.Count; ++_i91)
                {
                  byte[] _elem92 = null;
                  _elem92 = iprot.ReadBinary();
                  Rows.Add(_elem92);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Columns = new List<byte[]>();
                TList _list93 = iprot.ReadListBegin();
                for( int _i94 = 0; _i94 < _list93.Count; ++_i94)
                {
                  byte[] _elem95 = null;
                  _elem95 = iprot.ReadBinary();
                  Columns.Add(_elem95);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRowsWithColumnsTs_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Rows != null && __isset.rows) {
        field.Name = "rows";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Rows.Count));
          foreach (byte[] _iter96 in Rows)
          {
            oprot.WriteBinary(_iter96);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Columns.Count));
          foreach (byte[] _iter97 in Columns)
          {
            oprot.WriteBinary(_iter97);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRowsWithColumnsTs_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Rows: ");
      sb.Append(Rows);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRowsWithColumnsTs_result : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getRowsWithColumnsTs_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TRowResult>();
                TList _list98 = iprot.ReadListBegin();
                for( int _i99 = 0; _i99 < _list98.Count; ++_i99)
                {
                  TRowResult _elem100 = new TRowResult();
                  _elem100 = new TRowResult();
                  _elem100.Read(iprot);
                  Success.Add(_elem100);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRowsWithColumnsTs_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TRowResult _iter101 in Success)
            {
              _iter101.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRowsWithColumnsTs_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class mutateRow_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private List<Mutation> _mutations;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// list of mutation commands
    /// </summary>
    public List<Mutation> Mutations
    {
      get
      {
        return _mutations;
      }
      set
      {
        __isset.mutations = true;
        this._mutations = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
      public bool mutations;
    }

    public mutateRow_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Mutations = new List<Mutation>();
                TList _list102 = iprot.ReadListBegin();
                for( int _i103 = 0; _i103 < _list102.Count; ++_i103)
                {
                  Mutation _elem104 = new Mutation();
                  _elem104 = new Mutation();
                  _elem104.Read(iprot);
                  Mutations.Add(_elem104);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("mutateRow_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (Mutations != null && __isset.mutations) {
        field.Name = "mutations";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Mutations.Count));
          foreach (Mutation _iter105 in Mutations)
          {
            _iter105.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("mutateRow_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Mutations: ");
      sb.Append(Mutations);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class mutateRow_result : TBase
  {
    private IOError _io;
    private IllegalArgument _ia;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
      public bool ia;
    }

    public mutateRow_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ia = new IllegalArgument();
              Ia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("mutateRow_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ia) {
        if (Ia != null) {
          field.Name = "Ia";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ia.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("mutateRow_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(",Ia: ");
      sb.Append(Ia== null ? "<null>" : Ia.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class mutateRowTs_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private List<Mutation> _mutations;
    private long _timestamp;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// list of mutation commands
    /// </summary>
    public List<Mutation> Mutations
    {
      get
      {
        return _mutations;
      }
      set
      {
        __isset.mutations = true;
        this._mutations = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
      public bool mutations;
      public bool timestamp;
    }

    public mutateRowTs_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Mutations = new List<Mutation>();
                TList _list106 = iprot.ReadListBegin();
                for( int _i107 = 0; _i107 < _list106.Count; ++_i107)
                {
                  Mutation _elem108 = new Mutation();
                  _elem108 = new Mutation();
                  _elem108.Read(iprot);
                  Mutations.Add(_elem108);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("mutateRowTs_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (Mutations != null && __isset.mutations) {
        field.Name = "mutations";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Mutations.Count));
          foreach (Mutation _iter109 in Mutations)
          {
            _iter109.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("mutateRowTs_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Mutations: ");
      sb.Append(Mutations);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class mutateRowTs_result : TBase
  {
    private IOError _io;
    private IllegalArgument _ia;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
      public bool ia;
    }

    public mutateRowTs_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ia = new IllegalArgument();
              Ia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("mutateRowTs_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ia) {
        if (Ia != null) {
          field.Name = "Ia";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ia.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("mutateRowTs_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(",Ia: ");
      sb.Append(Ia== null ? "<null>" : Ia.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class mutateRows_args : TBase
  {
    private byte[] _tableName;
    private List<BatchMutation> _rowBatches;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// list of row batches
    /// </summary>
    public List<BatchMutation> RowBatches
    {
      get
      {
        return _rowBatches;
      }
      set
      {
        __isset.rowBatches = true;
        this._rowBatches = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool rowBatches;
    }

    public mutateRows_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                RowBatches = new List<BatchMutation>();
                TList _list110 = iprot.ReadListBegin();
                for( int _i111 = 0; _i111 < _list110.Count; ++_i111)
                {
                  BatchMutation _elem112 = new BatchMutation();
                  _elem112 = new BatchMutation();
                  _elem112.Read(iprot);
                  RowBatches.Add(_elem112);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("mutateRows_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (RowBatches != null && __isset.rowBatches) {
        field.Name = "rowBatches";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RowBatches.Count));
          foreach (BatchMutation _iter113 in RowBatches)
          {
            _iter113.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("mutateRows_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",RowBatches: ");
      sb.Append(RowBatches);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class mutateRows_result : TBase
  {
    private IOError _io;
    private IllegalArgument _ia;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
      public bool ia;
    }

    public mutateRows_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ia = new IllegalArgument();
              Ia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("mutateRows_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ia) {
        if (Ia != null) {
          field.Name = "Ia";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ia.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("mutateRows_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(",Ia: ");
      sb.Append(Ia== null ? "<null>" : Ia.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class mutateRowsTs_args : TBase
  {
    private byte[] _tableName;
    private List<BatchMutation> _rowBatches;
    private long _timestamp;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// list of row batches
    /// </summary>
    public List<BatchMutation> RowBatches
    {
      get
      {
        return _rowBatches;
      }
      set
      {
        __isset.rowBatches = true;
        this._rowBatches = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool rowBatches;
      public bool timestamp;
    }

    public mutateRowsTs_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                RowBatches = new List<BatchMutation>();
                TList _list114 = iprot.ReadListBegin();
                for( int _i115 = 0; _i115 < _list114.Count; ++_i115)
                {
                  BatchMutation _elem116 = new BatchMutation();
                  _elem116 = new BatchMutation();
                  _elem116.Read(iprot);
                  RowBatches.Add(_elem116);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("mutateRowsTs_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (RowBatches != null && __isset.rowBatches) {
        field.Name = "rowBatches";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RowBatches.Count));
          foreach (BatchMutation _iter117 in RowBatches)
          {
            _iter117.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("mutateRowsTs_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",RowBatches: ");
      sb.Append(RowBatches);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class mutateRowsTs_result : TBase
  {
    private IOError _io;
    private IllegalArgument _ia;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
      public bool ia;
    }

    public mutateRowsTs_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ia = new IllegalArgument();
              Ia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("mutateRowsTs_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ia) {
        if (Ia != null) {
          field.Name = "Ia";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ia.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("mutateRowsTs_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(",Ia: ");
      sb.Append(Ia== null ? "<null>" : Ia.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class atomicIncrement_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;
    private long _value;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row to increment
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// name of column
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    /// <summary>
    /// amount to increment by
    /// </summary>
    public long Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
      public bool column;
      public bool value;
    }

    public atomicIncrement_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Column = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Value = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("atomicIncrement_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (Column != null && __isset.column) {
        field.Name = "column";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Column);
        oprot.WriteFieldEnd();
      }
      if (__isset.value) {
        field.Name = "value";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Value);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("atomicIncrement_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Column: ");
      sb.Append(Column);
      sb.Append(",Value: ");
      sb.Append(Value);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class atomicIncrement_result : TBase
  {
    private long _success;
    private IOError _io;
    private IllegalArgument _ia;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
      public bool ia;
    }

    public atomicIncrement_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I64) {
              Success = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ia = new IllegalArgument();
              Ia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("atomicIncrement_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I64;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Success);
        oprot.WriteFieldEnd();
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ia) {
        if (Ia != null) {
          field.Name = "Ia";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ia.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("atomicIncrement_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(",Ia: ");
      sb.Append(Ia== null ? "<null>" : Ia.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAll_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Row to update
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// name of column whose value is to be deleted
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
      public bool column;
    }

    public deleteAll_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Column = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteAll_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (Column != null && __isset.column) {
        field.Name = "column";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Column);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteAll_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Column: ");
      sb.Append(Column);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAll_result : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public deleteAll_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteAll_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteAll_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAllTs_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;
    private long _timestamp;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Row to update
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// name of column whose value is to be deleted
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
      public bool column;
      public bool timestamp;
    }

    public deleteAllTs_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Column = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteAllTs_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (Column != null && __isset.column) {
        field.Name = "column";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Column);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteAllTs_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Column: ");
      sb.Append(Column);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAllTs_result : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public deleteAllTs_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteAllTs_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteAllTs_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAllRow_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// key of the row to be completely deleted.
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
    }

    public deleteAllRow_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteAllRow_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteAllRow_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAllRow_result : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public deleteAllRow_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteAllRow_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteAllRow_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAllRowTs_args : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private long _timestamp;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// key of the row to be completely deleted.
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool row;
      public bool timestamp;
    }

    public deleteAllRowTs_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteAllRowTs_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteAllRowTs_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAllRowTs_result : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public deleteAllRowTs_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteAllRowTs_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteAllRowTs_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerOpen_args : TBase
  {
    private byte[] _tableName;
    private byte[] _startRow;
    private List<byte[]> _columns;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Starting row in table to scan.
    /// Send "" (empty string) to start at the first row.
    /// </summary>
    public byte[] StartRow
    {
      get
      {
        return _startRow;
      }
      set
      {
        __isset.startRow = true;
        this._startRow = value;
      }
    }

    /// <summary>
    /// columns to scan. If column name is a column family, all
    /// columns of the specified column family are returned. It's also possible
    /// to pass a regex in the column qualifier.
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool startRow;
      public bool columns;
    }

    public scannerOpen_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              StartRow = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Columns = new List<byte[]>();
                TList _list118 = iprot.ReadListBegin();
                for( int _i119 = 0; _i119 < _list118.Count; ++_i119)
                {
                  byte[] _elem120 = null;
                  _elem120 = iprot.ReadBinary();
                  Columns.Add(_elem120);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerOpen_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (StartRow != null && __isset.startRow) {
        field.Name = "startRow";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(StartRow);
        oprot.WriteFieldEnd();
      }
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Columns.Count));
          foreach (byte[] _iter121 in Columns)
          {
            oprot.WriteBinary(_iter121);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerOpen_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",StartRow: ");
      sb.Append(StartRow);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerOpen_result : TBase
  {
    private int _success;
    private IOError _io;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public scannerOpen_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I32) {
              Success = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerOpen_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I32;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Success);
        oprot.WriteFieldEnd();
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerOpen_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerOpenWithStop_args : TBase
  {
    private byte[] _tableName;
    private byte[] _startRow;
    private byte[] _stopRow;
    private List<byte[]> _columns;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Starting row in table to scan.
    /// Send "" (empty string) to start at the first row.
    /// </summary>
    public byte[] StartRow
    {
      get
      {
        return _startRow;
      }
      set
      {
        __isset.startRow = true;
        this._startRow = value;
      }
    }

    /// <summary>
    /// row to stop scanning on. This row is *not* included in the
    /// scanner's results
    /// </summary>
    public byte[] StopRow
    {
      get
      {
        return _stopRow;
      }
      set
      {
        __isset.stopRow = true;
        this._stopRow = value;
      }
    }

    /// <summary>
    /// columns to scan. If column name is a column family, all
    /// columns of the specified column family are returned. It's also possible
    /// to pass a regex in the column qualifier.
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool startRow;
      public bool stopRow;
      public bool columns;
    }

    public scannerOpenWithStop_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              StartRow = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              StopRow = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Columns = new List<byte[]>();
                TList _list122 = iprot.ReadListBegin();
                for( int _i123 = 0; _i123 < _list122.Count; ++_i123)
                {
                  byte[] _elem124 = null;
                  _elem124 = iprot.ReadBinary();
                  Columns.Add(_elem124);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerOpenWithStop_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (StartRow != null && __isset.startRow) {
        field.Name = "startRow";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(StartRow);
        oprot.WriteFieldEnd();
      }
      if (StopRow != null && __isset.stopRow) {
        field.Name = "stopRow";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(StopRow);
        oprot.WriteFieldEnd();
      }
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Columns.Count));
          foreach (byte[] _iter125 in Columns)
          {
            oprot.WriteBinary(_iter125);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerOpenWithStop_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",StartRow: ");
      sb.Append(StartRow);
      sb.Append(",StopRow: ");
      sb.Append(StopRow);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerOpenWithStop_result : TBase
  {
    private int _success;
    private IOError _io;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public scannerOpenWithStop_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I32) {
              Success = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerOpenWithStop_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I32;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Success);
        oprot.WriteFieldEnd();
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerOpenWithStop_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerOpenWithPrefix_args : TBase
  {
    private byte[] _tableName;
    private byte[] _startAndPrefix;
    private List<byte[]> _columns;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// the prefix (and thus start row) of the keys you want
    /// </summary>
    public byte[] StartAndPrefix
    {
      get
      {
        return _startAndPrefix;
      }
      set
      {
        __isset.startAndPrefix = true;
        this._startAndPrefix = value;
      }
    }

    /// <summary>
    /// the columns you want returned
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool startAndPrefix;
      public bool columns;
    }

    public scannerOpenWithPrefix_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              StartAndPrefix = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Columns = new List<byte[]>();
                TList _list126 = iprot.ReadListBegin();
                for( int _i127 = 0; _i127 < _list126.Count; ++_i127)
                {
                  byte[] _elem128 = null;
                  _elem128 = iprot.ReadBinary();
                  Columns.Add(_elem128);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerOpenWithPrefix_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (StartAndPrefix != null && __isset.startAndPrefix) {
        field.Name = "startAndPrefix";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(StartAndPrefix);
        oprot.WriteFieldEnd();
      }
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Columns.Count));
          foreach (byte[] _iter129 in Columns)
          {
            oprot.WriteBinary(_iter129);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerOpenWithPrefix_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",StartAndPrefix: ");
      sb.Append(StartAndPrefix);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerOpenWithPrefix_result : TBase
  {
    private int _success;
    private IOError _io;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public scannerOpenWithPrefix_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I32) {
              Success = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerOpenWithPrefix_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I32;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Success);
        oprot.WriteFieldEnd();
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerOpenWithPrefix_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerOpenTs_args : TBase
  {
    private byte[] _tableName;
    private byte[] _startRow;
    private List<byte[]> _columns;
    private long _timestamp;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Starting row in table to scan.
    /// Send "" (empty string) to start at the first row.
    /// </summary>
    public byte[] StartRow
    {
      get
      {
        return _startRow;
      }
      set
      {
        __isset.startRow = true;
        this._startRow = value;
      }
    }

    /// <summary>
    /// columns to scan. If column name is a column family, all
    /// columns of the specified column family are returned. It's also possible
    /// to pass a regex in the column qualifier.
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool startRow;
      public bool columns;
      public bool timestamp;
    }

    public scannerOpenTs_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              StartRow = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Columns = new List<byte[]>();
                TList _list130 = iprot.ReadListBegin();
                for( int _i131 = 0; _i131 < _list130.Count; ++_i131)
                {
                  byte[] _elem132 = null;
                  _elem132 = iprot.ReadBinary();
                  Columns.Add(_elem132);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerOpenTs_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (StartRow != null && __isset.startRow) {
        field.Name = "startRow";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(StartRow);
        oprot.WriteFieldEnd();
      }
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Columns.Count));
          foreach (byte[] _iter133 in Columns)
          {
            oprot.WriteBinary(_iter133);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerOpenTs_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",StartRow: ");
      sb.Append(StartRow);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerOpenTs_result : TBase
  {
    private int _success;
    private IOError _io;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public scannerOpenTs_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I32) {
              Success = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerOpenTs_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I32;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Success);
        oprot.WriteFieldEnd();
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerOpenTs_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerOpenWithStopTs_args : TBase
  {
    private byte[] _tableName;
    private byte[] _startRow;
    private byte[] _stopRow;
    private List<byte[]> _columns;
    private long _timestamp;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Starting row in table to scan.
    /// Send "" (empty string) to start at the first row.
    /// </summary>
    public byte[] StartRow
    {
      get
      {
        return _startRow;
      }
      set
      {
        __isset.startRow = true;
        this._startRow = value;
      }
    }

    /// <summary>
    /// row to stop scanning on. This row is *not* included in the
    /// scanner's results
    /// </summary>
    public byte[] StopRow
    {
      get
      {
        return _stopRow;
      }
      set
      {
        __isset.stopRow = true;
        this._stopRow = value;
      }
    }

    /// <summary>
    /// columns to scan. If column name is a column family, all
    /// columns of the specified column family are returned. It's also possible
    /// to pass a regex in the column qualifier.
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tableName;
      public bool startRow;
      public bool stopRow;
      public bool columns;
      public bool timestamp;
    }

    public scannerOpenWithStopTs_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TableName = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              StartRow = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              StopRow = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Columns = new List<byte[]>();
                TList _list134 = iprot.ReadListBegin();
                for( int _i135 = 0; _i135 < _list134.Count; ++_i135)
                {
                  byte[] _elem136 = null;
                  _elem136 = iprot.ReadBinary();
                  Columns.Add(_elem136);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerOpenWithStopTs_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(TableName);
        oprot.WriteFieldEnd();
      }
      if (StartRow != null && __isset.startRow) {
        field.Name = "startRow";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(StartRow);
        oprot.WriteFieldEnd();
      }
      if (StopRow != null && __isset.stopRow) {
        field.Name = "stopRow";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(StopRow);
        oprot.WriteFieldEnd();
      }
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Columns.Count));
          foreach (byte[] _iter137 in Columns)
          {
            oprot.WriteBinary(_iter137);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerOpenWithStopTs_args(");
      sb.Append("TableName: ");
      sb.Append(TableName);
      sb.Append(",StartRow: ");
      sb.Append(StartRow);
      sb.Append(",StopRow: ");
      sb.Append(StopRow);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerOpenWithStopTs_result : TBase
  {
    private int _success;
    private IOError _io;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public scannerOpenWithStopTs_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I32) {
              Success = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerOpenWithStopTs_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I32;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Success);
        oprot.WriteFieldEnd();
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerOpenWithStopTs_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerGet_args : TBase
  {
    private int _id;

    /// <summary>
    /// id of a scanner returned by scannerOpen
    /// </summary>
    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public scannerGet_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerGet_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerGet_args(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerGet_result : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;
    private IllegalArgument _ia;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
      public bool ia;
    }

    public scannerGet_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TRowResult>();
                TList _list138 = iprot.ReadListBegin();
                for( int _i139 = 0; _i139 < _list138.Count; ++_i139)
                {
                  TRowResult _elem140 = new TRowResult();
                  _elem140 = new TRowResult();
                  _elem140.Read(iprot);
                  Success.Add(_elem140);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ia = new IllegalArgument();
              Ia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerGet_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TRowResult _iter141 in Success)
            {
              _iter141.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ia) {
        if (Ia != null) {
          field.Name = "Ia";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ia.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerGet_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(",Ia: ");
      sb.Append(Ia== null ? "<null>" : Ia.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerGetList_args : TBase
  {
    private int _id;
    private int _nbRows;

    /// <summary>
    /// id of a scanner returned by scannerOpen
    /// </summary>
    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// number of results to return
    /// </summary>
    public int NbRows
    {
      get
      {
        return _nbRows;
      }
      set
      {
        __isset.nbRows = true;
        this._nbRows = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool nbRows;
    }

    public scannerGetList_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              NbRows = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerGetList_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.nbRows) {
        field.Name = "nbRows";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NbRows);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerGetList_args(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",NbRows: ");
      sb.Append(NbRows);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerGetList_result : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;
    private IllegalArgument _ia;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
      public bool ia;
    }

    public scannerGetList_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TRowResult>();
                TList _list142 = iprot.ReadListBegin();
                for( int _i143 = 0; _i143 < _list142.Count; ++_i143)
                {
                  TRowResult _elem144 = new TRowResult();
                  _elem144 = new TRowResult();
                  _elem144.Read(iprot);
                  Success.Add(_elem144);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ia = new IllegalArgument();
              Ia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerGetList_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TRowResult _iter145 in Success)
            {
              _iter145.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ia) {
        if (Ia != null) {
          field.Name = "Ia";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ia.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerGetList_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(",Ia: ");
      sb.Append(Ia== null ? "<null>" : Ia.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerClose_args : TBase
  {
    private int _id;

    /// <summary>
    /// id of a scanner returned by scannerOpen
    /// </summary>
    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public scannerClose_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerClose_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerClose_args(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class scannerClose_result : TBase
  {
    private IOError _io;
    private IllegalArgument _ia;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
      public bool ia;
    }

    public scannerClose_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new IOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ia = new IllegalArgument();
              Ia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("scannerClose_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ia) {
        if (Ia != null) {
          field.Name = "Ia";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ia.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("scannerClose_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(",Ia: ");
      sb.Append(Ia== null ? "<null>" : Ia.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
